% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.index.R
\name{aggregate_position}
\alias{aggregate_position}
\title{quantification of (indirect) relations}
\usage{
aggregate_position(tau_x, type = "sum")
}
\arguments{
\item{tau_x}{matrix containing indirect relations.}

\item{type}{string. Type of aggregation used. See details for options.}
}
\value{
scores for the index defined by the indirect relation \code{tau_x} and the
used aggregation type.
}
\description{
function to aggregate positions defined via indirect relations to construct centrality
scores.
}
\details{
The predefined functions are mainly wrappers around base R functions.
type="sum", for instance, is equivalent to \code{rowSums()}. A non-base functions is
type="invsum" which calculates the inverse of type="sum".
type="self" is mostly useful for walk based relations, e.g. to count closed walks.
Other self explanatory options are type="mean", type="min", type="max" and type="prod".
}
\examples{
require(igraph)
require(magrittr)

#degree
g <- graph.empty(n=11,directed = FALSE)
g <- add_edges(g,c(1,11,2,4,3,5,3,11,4,8,5,9,5,11,6,7,6,8,
                   6,10,6,11,7,9,7,10,7,11,8,9,8,10,9,10))

g \%>\% indirect_relations(type="identity") \%>\% 
aggregate_position(type="sum")

#closeness centrality
g \%>\% indirect_relations(type="geodesic") \%>\% 
  aggregate_position(type="invsum")
  
#betweenness centrality
g \%>\% indirect_relations(type="dependencies") \%>\% 
  aggregate_position(type="sum")
  
#eigenvector centrality
g \%>\% indirect_relations(type="walks",FUN=walks_limit_prop) \%>\% 
  aggregate_position(type="sum")

#subgraph centrality
g \%>\% indirect_relations(type="walks",FUN=walks_exp) \%>\% 
  aggregate_position(type="self")
}
\seealso{
\link{indirect_relations}, \link{transform_relations}
}
\author{
David Schoch
}
