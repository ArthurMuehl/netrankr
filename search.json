[{"path":[]},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement david@schochastics.net. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://schochastics.github.io/netrankr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://schochastics.github.io/netrankr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to netrankr","title":"Contributing to netrankr","text":"outlines propose change netrankr.","code":""},{"path":"https://schochastics.github.io/netrankr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to netrankr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://schochastics.github.io/netrankr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to netrankr","text":"want make bigger change, ’s good idea first file issue make sure maintainer agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://schochastics.github.io/netrankr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to netrankr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"schochastics/netrankr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://schochastics.github.io/netrankr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to netrankr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://schochastics.github.io/netrankr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to netrankr","text":"Please note netrankr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://schochastics.github.io/netrankr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 netrankr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://schochastics.github.io/netrankr/articles/benchmarks.html","id":"runtimes-exact-probabilities","dir":"Articles","previous_headings":"","what":"Runtimes exact probabilities","title":"Benchmark Results","text":"figure shows runtime exact_rank_prob() sample 3,000 partial rankings 10 20 nodes varying degree completeness.  surprisingly, runtime increases quickly number nodes number incomparable pairs partial ranking. crude rule thumb: long partial ranking less 30 elements, always save run exact_rank_prob(). Beyond 30 elements, advisable use function high fraction pairs elements already comparable. elements, higher fraction .","code":""},{"path":"https://schochastics.github.io/netrankr/articles/benchmarks.html","id":"approximating-expected-ranks","dir":"Articles","previous_headings":"","what":"Approximating expected ranks","title":"Benchmark Results","text":"netrankr implements five methods approximate expected ranks given functions approx_rank_expected() mcmc_rank_prob(). four methods implemented former based structural features partial ranking, latter based sampling rankings (almost) uniformly random set rankings. Consult help files detailed description references. figure shows (averaged) mean absolute error compared exact expected ranks five methods set 3000 partial rankings . number drawn samples mcmc function set \\(n^5\\), \\(n\\) number elements partial ranking.  basic local partial order model performs considerably worse methods almost partial rankings. generalized version outperforms methods based relative rank probabilities (loof1 loof2) number incomparable pairs high. mcmc method generally yields best approximations, especially increasing number elements. However, performance seems get worse almost none elements comparable. issue discussed section choosing number samples .","code":""},{"path":"https://schochastics.github.io/netrankr/articles/benchmarks.html","id":"approximating-relative-ranks","dir":"Articles","previous_headings":"","what":"Approximating relative ranks","title":"Benchmark Results","text":"Relative ranks can either approximated iterative function approx_rank_relative() via sampling rankings (almost) uniformly random mcmc_rank_prob(). figure shows (averaged) mean absolute error compared exact relative rank probabilities set 13000 partial rankings . number drawn samples mcmc function set \\(n^4\\), \\(n\\) number elements partial ranking. number iterative steps approx_rank_relative() set 1 (iteration), 5, 10 15 respectively. Clearly, non-iterative approximation performs worse partial rankings. iterations better approximation quality seems , yet gain quality going 10 15 iterations seems negligible. mcmc based function performs better except region low comparability.","code":""},{"path":"https://schochastics.github.io/netrankr/articles/benchmarks.html","id":"mcmc-sampling-of-rankings","dir":"Articles","previous_headings":"","what":"MCMC sampling of rankings","title":"Benchmark Results","text":"results shown approximating expected ranks relative rank probabilities basis random sample generally give best results, except region low comparability. problem can mitigated increasing number samples. boxplot shows mean absolute error expected ranks empty partial ranking 10 elements, number samples increased. sample size, 100 repetition done. procedure carried relative ranks .  , increasing number samples (quite naturally) leads better approximations, course also comes increase running time, especially larger partial rankings.","code":""},{"path":"https://schochastics.github.io/netrankr/articles/benchmarks.html","id":"runtimes-of-approximation","dir":"Articles","previous_headings":"","what":"Runtimes of approximation","title":"Benchmark Results","text":"function mcmc_rank_prob() generally gives best approximations. larger number samples, better. Since number samples least cubic number elements, limited partial rankings couple hundred elements. Although function approx_rank_expected() approx_rank_relative() performed worst tests, computationally least expensive time complexity \\(\\mathcal{O}(n^2)\\). Thus, able least give rough approximation also partial rankings beyond 1000 elements.","code":""},{"path":"https://schochastics.github.io/netrankr/articles/benchmarks.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Benchmark Results","text":"","code":"## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5       cli_3.6.2         knitr_1.45        rlang_1.1.2       ##  [5] xfun_0.41         highr_0.10        stringi_1.8.3     purrr_1.0.2       ##  [9] textshaping_0.3.7 jsonlite_1.8.8    glue_1.6.2        htmltools_0.5.7   ## [13] ragg_1.2.7        sass_0.4.8        rmarkdown_2.25    evaluate_0.23     ## [17] jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.8        lifecycle_1.0.4   ## [21] memoise_2.0.1     stringr_1.5.1     compiler_4.3.2    fs_1.6.3          ## [25] systemfonts_1.0.5 digest_0.6.33     R6_2.5.1          magrittr_2.0.3    ## [29] bslib_0.6.1       tools_4.3.2       pkgdown_2.0.7     cachem_1.0.8      ## [33] desc_1.4.3"},{"path":"https://schochastics.github.io/netrankr/articles/centrality_indices.html","id":"theoretical-background","dir":"Articles","previous_headings":"","what":"Theoretical Background","title":"Centrality indices","text":"one-mode network can described dyadic variable \\(x\\\\mathcal{W}^\\mathcal{D}\\), \\(\\mathcal{W}\\) value range network (simple case unweighted networks \\(\\mathcal{W}=\\{0,1\\}\\)) \\(\\mathcal{D}=\\mathcal{N}\\times\\mathcal{N}\\) describes dyadic domain actors \\(\\mathcal{N}\\). Observed presence absence ties (value range binary) usually relation interest network analytic tasks. Instead, mostly implicitly, relations transformed new set indirect relations basis observed relations. example, consider (shortest path) distances underlying graph. fairly easy derive observed network contacts, impossible actors network answer question “far away others connected ?”. denote generic transformed networks observed network \\(x\\) \\(\\tau(x)\\). notion indirect relations, can express centrality indices common framework \\[ c_\\tau()=\\sum\\limits_{t \\\\mathcal{N}} \\tau(x)_{} \\] Degree closeness centrality, instance, can obtained setting \\(\\tau=id\\) \\(\\tau=dist\\), respectively. Others need several additional specifications can found Brandes (2016) Schoch & Brandes (2016). framework, centrality indices can characterized degree-like measures suitably transformed network \\(\\tau(x)\\). build specific indices, follow analytic pipeline centrality assessment: \\[ \\text{Observed network}\\;(x) \\longrightarrow \\text{transformation}\\;(\\tau(x)) \\longrightarrow \\text{aggregation}\\;(e.g. \\sum_j \\tau(x)_{ij}) \\]","code":""},{"path":"https://schochastics.github.io/netrankr/articles/centrality_indices.html","id":"building-indices-with-the-netrankr-package","dir":"Articles","previous_headings":"","what":"Building indices with the netrankr package","title":"Centrality indices","text":"netrankr , design, explicitly implement centrality index. , however, provide large set components create indices. Building index based indirect relation, computed indirect_relations(), done function aggregate_positions(). usual workflow follows:g %>% indirect_relations() %>% aggregate_positions() equivalent aggregate_positions(indirect_relations(g)). former, however, comes enhanced readability accordance proposed analytic pipeline (see ).aggregate_position() parameter type used choose appropriate aggregation method. Commonly, simply sum operation. closeness type=\"invsum\" used since traditional closeness defined \\[ c_c()=\\frac{1}{\\sum_t dist(,t)}. \\] obtain slight variant closeness, .e. \\[ c_c()=\\sum_t \\frac{1}{dist(,t)}, \\] following code can used: Indices based shortest path distances constitute biggest group indices netrankr package. package implements several additional distance measures networks, index exists far. Consult help indirect_relations() possibilities. Another large group indices based walk counts. Note: analytic pipeline can course wrapped function. Additionally, Rstudio addin index_builder() provides convenient way produce code desired index.","code":"library(netrankr) library(igraph) library(magrittr) data(\"dbces11\") g <- dbces11  V(g)$name <- 1:11  #Degree g %>%    indirect_relations(type=\"adjacency\") %>%    aggregate_positions(type=\"sum\") #Closeness g %>%    indirect_relations(type=\"dist_sp\") %>%    aggregate_positions(type=\"invsum\") #Betweenness Centrality g %>%    indirect_relations(type=\"depend_sp\") %>%    aggregate_positions(type=\"sum\") #Eigenvector Centrality g %>%    indirect_relations(type=\"walks\",FUN=walks_limit_prop) %>%    aggregate_positions(type=\"sum\") #harmonic closeness g %>%    indirect_relations(type=\"dist_sp\",FUN=dist_inv) %>%    aggregate_positions(type=\"sum\") #residual closeness (Dangalchev,2006) g %>%    indirect_relations(type=\"dist_sp\",FUN=dist_2pow) %>%    aggregate_positions(type=\"sum\")  #generalized closeness (Agneessens et al.,2017) (alpha>0) g %>%    indirect_relations(type=\"dist_sp\",FUN=dist_dpow,alpha=2) %>%    aggregate_positions(type=\"sum\")  #decay centrality (Jackson, 2010) (alpha in [0,1]) g %>%    indirect_relations(type=\"dist_sp\",FUN=dist_powd,alpha=0.7) %>%    aggregate_positions(type=\"sum\")  #integration centrality (Valente & Foreman, 1998) dist_integration <- function(x){   x <- 1 - (x - 1)/max(x) } g %>%    indirect_relations(type=\"dist_sp\",FUN=dist_integration) %>%    aggregate_positions(type=\"sum\") #subgraph centrality g %>%    indirect_relations(type=\"walks\",FUN=walks_exp) %>%    aggregate_positions(type=\"self\") #communicability centrality g %>%    indirect_relations(type=\"walks\",FUN=walks_exp) %>%    aggregate_positions(type=\"sum\") #odd subgraph centrality g %>%    indirect_relations(type=\"walks\",FUN=walks_exp_odd) %>%    aggregate_positions(type=\"self\") #even subgraph centrality g %>%    indirect_relations(type=\"walks\",FUN=walks_exp_even) %>%    aggregate_positions(type=\"self\") #katz status g %>%    indirect_relations(type=\"walks\",FUN=walks_attenuated) %>%    aggregate_positions(type=\"sum\") degree_centrality <- function(g){   DC <- g %>%      indirect_relations(type=\"adjacency\") %>%      aggregate_positions(type=\"sum\")   return(DC) }"},{"path":"https://schochastics.github.io/netrankr/articles/indirect_relations.html","id":"theoretical-background","dir":"Articles","previous_headings":"","what":"Theoretical Background","title":"Indirect relations in networks","text":"one-mode network can described dyadic variable \\(x\\\\mathcal{W}^\\mathcal{D}\\), \\(\\mathcal{W}\\) value range network (simple case unweighted networks \\(\\mathcal{W}=\\{0,1\\}\\)) \\(\\mathcal{D}=\\mathcal{N}\\times\\mathcal{N}\\) describes dyadic domain actors \\(\\mathcal{N}\\). Observed presence absence ties (value range binary) usually relation interest network analytic tasks. Instead, mostly implicitly, relations transformed new set indirect relations basis observed relations. example, consider (shortest path) distances underlying graph. fairly easy derive observed network contacts, impossible actors network answer question “far away others connected ?”. denote generic transformed networks observed network \\(x\\) \\(\\tau(x)\\). notion indirect relations, can express centrality indices common framework \\[ c_\\tau()=\\sum\\limits_{t \\\\mathcal{N}} \\tau(x)_{} \\] Degree closeness centrality, instance, can obtained setting \\(\\tau=id\\) \\(\\tau=dist\\), respectively. Others need several additional specifications can found Brandes (2016) Schoch & Brandes (2016). framework, can characterize centrality indices degree-like measures suitably transformed network \\(\\tau(x)\\).","code":""},{"path":"https://schochastics.github.io/netrankr/articles/indirect_relations.html","id":"indirect-relations-in-the-netrankr-package","dir":"Articles","previous_headings":"","what":"Indirect relations in the netrankr package","title":"Indirect relations in networks","text":"netrankr package implements great variety indirect relations () used centrality related considerations network. indirect relations can computed indirect_relations() function, specifying type parameter. Indirect relations represented matrices, similar adjacency matrix. matrices show distance matrix based sahortest paths, pairwise dependencies (used e.g. betweenness). function takes additional parameter FUN can used pass function transform relations. main use obtain indirect relations based walk counts. Additional parameters can also passed calculate parameterized versions relations. view predefined transformation functions see ?transform_relations. predefined functions follow naming scheme <relation>_<transformation>. functions dist_ thus meaningful fordistance type relations type=\"dist_sp\" type=\"dist_resist\". Equivalently, walks_ type=\"walks\". predefined functions exhaustive just constitute common transformations. , however, straightforward pass transformation function. function dist_integration() computes \\[ \\tau(x)_{ij}=1-\\frac{dist(,j)-1}{max_{,j}\\; dist(,j)} \\] used centrality index integration defined Valente Foreman (1998) computed relations CAN used build centrality indices (e.g. provided Rstudio index_builder()), also derive partial rankings positional_dominance(). Consult respective vignette help.","code":"library(netrankr) library(igraph) data(\"dbces11\") g <- dbces11  # adjacency A <- indirect_relations(g, type = \"adjacency\") # shortest path distances D <- indirect_relations(g, type = \"dist_sp\") # dyadic dependencies (as used in betweenness centrality) B <- indirect_relations(g, type = \"depend_sp\") # resistance distance (as used in information centrality) R <- indirect_relations(g, type = \"dist_resist\") # Logarithmic forest distance (parametrized family of distances) LF <- indirect_relations(g, type = \"dist_lf\", lfparam = 1) # Walk distance (parametrized family of distances) WD <- indirect_relations(g, type = \"dist_walk\", dwparam = 0.001) # Random walk distance WD <- indirect_relations(g, type = \"dist_rwalk\") # See ?indirect_relations for further options D ##   A B C D E F G H I J K ## A 0 5 2 4 2 2 2 3 3 3 1 ## B 5 0 5 1 4 3 4 2 3 3 4 ## C 2 5 0 4 1 2 2 3 2 3 1 ## D 4 1 4 0 3 2 3 1 2 2 3 ## E 2 4 1 3 0 2 2 2 1 2 1 ## F 2 3 2 2 2 0 1 1 2 1 1 ## G 2 4 2 3 2 1 0 2 1 1 1 ## H 3 2 3 1 2 1 2 0 1 1 2 ## I 3 3 2 2 1 2 1 1 0 1 2 ## J 3 3 3 2 2 1 1 1 1 0 2 ## K 1 4 1 3 1 1 1 2 2 2 0 B ##     A         B         C         D   E         F   G         H         I ## A 0.0 0.0000000 0.0000000 0.0000000 0.0 0.0000000 0.0 0.0000000 0.0000000 ## B 0.0 0.0000000 0.0000000 0.0000000 0.0 0.0000000 0.0 0.0000000 0.0000000 ## C 0.0 0.0000000 0.0000000 0.0000000 0.0 0.0000000 0.0 0.0000000 0.0000000 ## D 1.0 9.0000000 1.0000000 0.0000000 1.0 1.0000000 1.0 1.0000000 1.0000000 ## E 0.5 0.5000000 2.8333333 0.5000000 0.0 0.0000000 0.0 0.5000000 2.0000000 ## F 3.5 2.8333333 1.8333333 2.8333333 0.0 0.0000000 1.0 2.8333333 0.0000000 ## G 1.0 0.0000000 0.3333333 0.0000000 0.0 0.3333333 0.0 0.0000000 1.3333333 ## H 2.0 8.0000000 2.0000000 8.0000000 2.0 2.3333333 2.0 0.0000000 2.3333333 ## I 0.0 1.8333333 1.8333333 1.8333333 4.5 0.0000000 1.5 1.8333333 0.0000000 ## J 0.0 0.3333333 0.0000000 0.3333333 0.0 0.3333333 1.0 0.3333333 0.3333333 ## K 9.0 1.5000000 5.1666667 1.5000000 2.5 3.0000000 2.5 1.5000000 1.0000000 ##           J   K ## A 0.0000000 0.0 ## B 0.0000000 0.0 ## C 0.0000000 0.0 ## D 1.0000000 1.0 ## E 0.3333333 0.5 ## F 1.3333333 3.5 ## G 1.3333333 1.0 ## H 2.0000000 2.0 ## I 1.3333333 0.0 ## J 0.0000000 0.0 ## K 1.6666667 0.0 # count the limit proportion of walks (used for eigenvector centrality) W <- indirect_relations(g, type = \"walks\", FUN = walks_limit_prop) # count the number of walks of arbitrary length between nodes, weighted by # the inverse factorial of their length (used for subgraph centrality) S <- indirect_relations(g, type = \"walks\", FUN = walks_exp) # Calculate dist(s,t)^-alpha D <- indirect_relations(g, type = \"dist_sp\", FUN = dist_dpow, alpha = 2) dist_integration <- function(x) {     x <- 1 - (x - 1) / max(x) } D <- indirect_relations(g, type = \"dist_sp\", FUN = dist_integration)"},{"path":"https://schochastics.github.io/netrankr/articles/neighborhood_inclusion.html","id":"theoretical-background","dir":"Articles","previous_headings":"","what":"Theoretical Background","title":"Neighborhood-inclusion in networks","text":"undirected graph \\(G=(V,E)\\), neighborhood node \\(u \\V\\) defined \\[N(u)=\\lbrace w : \\lbrace u,w \\rbrace \\E \\rbrace\\] closed neighborhood \\(N[v]=N(v) \\cup \\lbrace v \\rbrace\\). neighborhood node \\(u\\) subset closed neighborhood node \\(v\\), \\(N(u)\\subseteq N[v]\\), speak neighborhood inclusion. concept defines dominance relation among nodes network. say \\(u\\) dominated \\(v\\) \\(N(u)\\subseteq N[v]\\). Neighborhood-inclusion induces partial ranking vertices network. , (usually) (!) pairs vertices incomparable, neither \\(N(u)\\subseteq N[v]\\) \\(N(v)\\subseteq N[u]\\) holds. , however, special graph class pairs comparable (found vignette). importance neighborhood-inclusion given following result: \\[ N(u)\\subseteq N[v] \\implies c(u)\\leq c(v), \\] \\(c\\) centrality index defined special path algebras. include many well known measures like closeness (variants), betweenness (variants) well many walk-based indices (eigenvector subgraph centrality, total communicability,…). informally, \\(u\\) dominated \\(v\\), u less central \\(v\\) matter centrality index used, fulfill requirement. key result, short description leaves many theoretical considerations. can found Schoch, David & Brandes, Ulrik. (2016). Re-conceptualizing centrality social networks. European Journal Appplied Mathematics, 27(6), 971–985. (link)","code":""},{"path":"https://schochastics.github.io/netrankr/articles/neighborhood_inclusion.html","id":"neighborhood-inclusion-in-the-netrankr-package","dir":"Articles","previous_headings":"","what":"Neighborhood-inclusion in the netrankr Package","title":"Neighborhood-inclusion in networks","text":"work following simple graph.  can compare neighborhoods manually neighborhood function igraph package. Note mindist parameter distinguish open closed neighborhood. Although obvious Nu subset Nv, can verify follows. Checking pairs nodes can efficiently done neighborhood_inclusion() function netrankr package. entry P[u,v] equal one, \\(N(u)\\subseteq N[v]\\). function dominance_graph() can alternatively used visualize neighborhood inclusion directed graph.","code":"library(netrankr) library(igraph) set.seed(1886) #for reproducibility data(\"dbces11\") g <- dbces11  plot(g,      vertex.color=\"black\",vertex.label.color=\"white\", vertex.size=16,vertex.label.cex=0.75,      edge.color=\"black\",      margin=0,asp=0.5) u <- 3 v <- 5 Nu <- neighborhood(g,order=1,nodes=u,mindist = 1)[[1]] #N(u)  Nv <- neighborhood(g,order=1,nodes=v,mindist = 0)[[1]] #N[v]   Nu ## + 2/11 vertices, named, from 013399c: ## [1] E K Nv ## + 4/11 vertices, named, from 013399c: ## [1] E C I K all(Nu%in%Nv) ## [1] TRUE P <- neighborhood_inclusion(g, sparse = FALSE) P ##   A B C D E F G H I J K ## A 0 0 1 0 1 1 1 0 0 0 1 ## B 0 0 0 1 0 0 0 1 0 0 0 ## C 0 0 0 0 1 0 0 0 0 0 1 ## D 0 0 0 0 0 0 0 0 0 0 0 ## E 0 0 0 0 0 0 0 0 0 0 0 ## F 0 0 0 0 0 0 0 0 0 0 0 ## G 0 0 0 0 0 0 0 0 0 0 0 ## H 0 0 0 0 0 0 0 0 0 0 0 ## I 0 0 0 0 0 0 0 0 0 0 0 ## J 0 0 0 0 0 0 0 0 0 0 0 ## K 0 0 0 0 0 0 0 0 0 0 0 g.dom <- dominance_graph(P)  plot(g.dom,      vertex.color=\"black\",vertex.label.color=\"white\", vertex.size=16, vertex.label.cex=0.75,      edge.color=\"black\", edge.arrow.size=0.5,margin=0,asp=0.5)"},{"path":"https://schochastics.github.io/netrankr/articles/neighborhood_inclusion.html","id":"centrality-and-neighborhood-inclusion","dir":"Articles","previous_headings":"Neighborhood-inclusion in the netrankr Package","what":"Centrality and Neighborhood-inclusion","title":"Neighborhood-inclusion in networks","text":"start calculating standard measures centrality found ìgraph package example network. Note netrankr package also implements great variety indices, need specifications described vignette. Notice centrality index, different vertices considered central node. central degree subgraph centrality \\(11\\), \\(8\\), \\(6\\), \\(7\\) \\(10\\). Note undominated vertices can achieve highest score reasonable index. soon vertex dominated least one , always ranked dominator. can check undominated vertices simply forming row Sums P. 8 nodes undominated graph. thus entirely possible find indices also rank \\(4, 5\\) \\(9\\) top. Besides top ranked nodes, can check entire partial ranking P preserved centrality ranking. exists pair \\(u\\) \\(v\\) index \\(c()\\) \\(N(u)\\subseteq N[v]\\) \\(c(v)>c(u)\\), consider \\(c\\) valid index. example, considered vertex \\(3\\) \\(5\\), \\(3\\) dominated \\(5\\). easy verify centrality scores \\(5\\) fact greater ones \\(3\\) inspecting respective rows table. check pairs, use function is_preserved. function takes partial ranking, induced neighborhood inclusion, score vector centrality index checks P[,j]==1 & scores[]>scores[j] FALSE pairs j. considered indices preserve neighborhood inclusion preorder example network. NOTE: Preserving neighborhood inclusion one network guarantee index preserves networks. details refer paper cited first section.","code":"cent.df <- data.frame(   vertex=1:11,   degree=degree(g),   betweenness=betweenness(g),   closeness=closeness(g),   eigenvector=eigen_centrality(g)$vector,   subgraph=subgraph_centrality(g) )  #rounding for better readability cent.df.rounded <- round(cent.df,4)  cent.df.rounded ##   vertex degree betweenness closeness eigenvector subgraph ## A      1      1      0.0000    0.0370      0.2260   1.8251 ## B      2      1      0.0000    0.0294      0.0646   1.5954 ## C      3      2      0.0000    0.0400      0.3786   3.1486 ## D      4      2      9.0000    0.0400      0.2415   2.4231 ## E      5      3      3.8333    0.0500      0.5709   4.3871 ## F      6      4      9.8333    0.0588      0.9847   7.8073 ## G      7      4      2.6667    0.0526      1.0000   7.9394 ## H      8      4     16.3333    0.0556      0.8386   6.6728 ## I      9      4      7.3333    0.0556      0.9114   7.0327 ## J     10      4      1.3333    0.0526      0.9986   8.2421 ## K     11      5     14.6667    0.0556      0.8450   7.3896 which(rowSums(P)==0) ##  D  E  F  G  H  I  J  K  ##  4  5  6  7  8  9 10 11 apply(cent.df[,2:6],2,function(x) is_preserved(P,x)) ##      degree betweenness   closeness eigenvector    subgraph  ##        TRUE        TRUE        TRUE        TRUE        TRUE"},{"path":"https://schochastics.github.io/netrankr/articles/partial_centrality.html","id":"rank-intervals","dir":"Articles","previous_headings":"","what":"Rank intervals","title":"Partial Centrality","text":"function rank_intervals() used calculate maximal minimal possible rank node ranking accordance given partial ranking. package uses convention, higher numerical ranks correspond top ranked position. lowest possible rank thus 1. column mid_point confused expected rank nodes, calculated function exact_rank_prob(). See vignette details. Rank intervals useful assess ambiguity ranking nodes. bigger intervals , freedom exists, e.g. centrality indices, rank nodes differently. intervals can visualized plot() function. function can take data frame centrality scores additional parameter cent_scores. ranks node index plotted within interval. , higher numerical rank higher ranked node according index.  small jitter effect added points reduce -plotting. Note may encounter situations, ranks centralities may fall outside interval. can happen cases ties rankings, especially betweenness centrality. Betweenness , far, index strictly preserve neighborhood-inclusion. , \\[ N(u)\\subseteq N[v] \\text{ } N(v)\\\\subseteq N[u] \\implies c(u)<c(v) \\] holds indices, betweenness fails fulfill property. intervals reduce single points threshold graphs, since nodes pairwise comparable neighborhood-inclusion.  described betweenness inconsistancy evident threshold graphs shown rank intervals .","code":"library(netrankr) library(igraph) library(magrittr) data(\"dbces11\") g <- dbces11  #neighborhood inclusion  P <- g %>% neighborhood_inclusion(sparse = FALSE)  #without %>% operator: # P <- neighborhood_inclusion(g, sparse = FALSE)  rank_intervals(P) ##  node:A rank interval: [1, 6] ##  node:B rank interval: [1, 9] ##  node:C rank interval: [2, 9] ##  node:D rank interval: [2, 11] ##  node:E rank interval: [3, 11] ##  node:F rank interval: [2, 11] ##  node:G rank interval: [2, 11] ##  node:H rank interval: [2, 11] ##  node:I rank interval: [1, 11] ##  node:J rank interval: [1, 11] ##  node:K rank interval: [3, 11] cent_scores <- data.frame(    degree=degree(g),    betweenness=round(betweenness(g),4),    closeness=round(closeness(g),4),    eigenvector=round(eigen_centrality(g)$vector,4))  rk_int <- rank_intervals(P) plot(rk_int,cent_scores = cent_scores) set.seed(123) tg <- threshold_graph(20,0.2)  #neighborhood inclusion  P <- tg %>% neighborhood_inclusion(sparse = FALSE)  #without %>% operator: # P <- neighborhood_inclusion(tg,sparse = FALSE) plot(rank_intervals(P)) cent_scores <- data.frame(    degree=degree(tg),    betweenness=round(betweenness(tg),4),    closeness=round(closeness(tg),4),    eigenvector=round(eigen_centrality(tg)$vector,4))   plot(rank_intervals(P),cent_scores = cent_scores)"},{"path":"https://schochastics.github.io/netrankr/articles/positional_dominance.html","id":"theoretical-background","dir":"Articles","previous_headings":"","what":"Theoretical Background","title":"Positional dominance in networks","text":"network can described dyadic variable \\(x\\\\mathcal{W}^\\mathcal{D}\\), \\(\\mathcal{W}\\) value range network (simple case unweighted networks \\(\\mathcal{W}=\\{0,1\\}\\)) \\(\\mathcal{D}=\\mathcal{N}\\times\\mathcal{}\\) describes dyadic domain actors \\(\\mathcal{N}\\) affiliations \\(\\mathcal{}\\). \\(\\mathcal{}\\neq\\mathcal{N}\\), obtain two-mode network \\(\\mathcal{}=\\mathcal{N}\\) one-mode network consisting relations among actors. Definition Let \\(x\\\\mathcal{W}^\\mathcal{D}\\) network \\(,j \\\\mathcal{N}\\). say \\(\\) dominated \\(j\\) total homogeneity assumption, denoted \\(\\leq j\\) \\[ x_{}\\leq x_{jt} \\quad \\forall t \\\\mathcal{N}. \\] exists permutation \\(\\pi: \\mathcal{N} \\\\mathcal{N}\\) \\[ x_{}\\leq x_{j\\pi(t)} \\quad \\forall t \\\\mathcal{N}, \\] say \\(\\) dominated \\(j\\) total heterogeneity assumption, denoted \\(⪯ j\\). holds \\(\\leq j \\implies ⪯ j\\) vice versa. positional dominance positional approach network analysis can found Brandes, Ulrik. (2016). Network Positions. Methodological Innovations, 9, 2059799116630650. (link)","code":""},{"path":"https://schochastics.github.io/netrankr/articles/positional_dominance.html","id":"positional-dominance-in-the-netrankr-package","dir":"Articles","previous_headings":"","what":"Positional Dominance in the netrankr Package","title":"Positional dominance in networks","text":"function positional_dominance can used check , dominance homogeneity heterogeneity. accordance analytic pipeline centrality use %>% operator. indirect_relations() function can found vignette. map parameter positional_dominance allows distinguish dominance total heterogeneity (map=FALSE) total homogeneity (map=TRUE). later case, relations can ordered non-decreasingly (non-increasingly relation describes costs, distances) afterwards checked front back. Dominance total homogeneity yields ranking, relation binary (e.g. adjacent ). cost variables like shortest path distances, benefit parameter set FALSE. definition given first section, clear always least many comparable pairs total homogeneity assumption total heterogeneity. Additionally, dominance relations heterogeneity assumption preserved total homogeneity. (Note: \\(\\implies B\\) equivalent \\(\\neg \\lor B\\))","code":"library(netrankr) library(igraph) library(magrittr) set.seed(1886) #for reproducibility data(\"dbces11\") g <- dbces11  #neighborhood inclusion can be expressed with the analytic pipeline D <- g %>% indirect_relations(type=\"adjacency\") %>% positional_dominance() D <- g %>%    indirect_relations(type=\"adjacency\") %>%    positional_dominance(map=TRUE)  comparable_pairs(D) ## [1] 1 D1 <- g %>%    indirect_relations(type=\"dist_sp\") %>%    positional_dominance(map=FALSE,benefit=FALSE) D1 <- g %>%    indirect_relations(type=\"dist_sp\") %>%    positional_dominance(map=FALSE,benefit=FALSE)  D2 <- g %>%    indirect_relations(type=\"dist_sp\") %>%    positional_dominance(map=TRUE,benefit=FALSE)  c(\"heterogeneity\"=comparable_pairs(D1),   \"homogeneity\"=comparable_pairs(D2)) ## heterogeneity   homogeneity  ##     0.1636364     0.8727273 all(D1!=1 | D2==1) ## [1] TRUE"},{"path":"https://schochastics.github.io/netrankr/articles/probabilistic_cent.html","id":"theoretical-background","dir":"Articles","previous_headings":"","what":"Theoretical Background","title":"Probabilistic Centrality","text":"Neighborhood-inclusion induces partial ranking vertices graph \\(G=(V,E)\\). write \\(u\\leq v\\) \\(N(u)\\subseteq N[v]\\) holds two vertices \\(u,v \\V\\). fact \\[ u\\leq v \\implies c(u) \\leq c(v) \\] holds centrality index \\(c:V\\\\mathbb{R}\\), can characterize set possible centrality based node rankings. Namely set rankings extend partial ranking “\\(\\leq\\)” (complete) ranking. node ranking can defined mapping \\[rk: V \\\\{1,\\ldots,n\\},\\] use convention \\(u\\) top ranked node \\(rk(u)=n\\) bottom ranked one \\(rk(u)=1\\). set possible rankings can characterized \\[ \\mathcal{R}(\\leq)=\\{rk:V \\\\{1,\\ldots,n\\}\\; : \\; u\\leq v \\implies rk(u)\\leq rk(v)\\}. \\] set contains rankings obtained centrality index. \\(\\mathcal{R}(\\leq)\\) calculated, can used probabilistic assessment centrality, analyzing possible rankings . Examples include relative rank probabilities (likely , node \\(u\\) central another node \\(v\\)?) expected ranks (central expect node \\(u\\) ). noted though, deriving set \\(\\mathcal{R}(\\leq)\\) quickly becomes infeasible larger networks, one resort approximation methods. theoretical details can found Schoch, David. (2018). Centrality without Indices: Partial rankings rank Probabilities networks. Social Networks, 54, 50-60.(link)","code":""},{"path":"https://schochastics.github.io/netrankr/articles/probabilistic_cent.html","id":"exact-probabilities-in-the-netrankr-package","dir":"Articles","previous_headings":"","what":"Exact Probabilities in the netrankr Package","title":"Probabilistic Centrality","text":"calculating probabilities consider following example graph rankings induced various centrality indices, shown rank intervals (consult vignette details).  Notice five indices rank different vertex central one. following subsections output function exact_rank_prob() described may help circumvent potential arbitrariness index induced rankings. first, let us briefly look return values. function returns object type contains result full probabilistic rank analysis. specific list entries discussed following subsections.","code":"library(netrankr) library(igraph) library(magrittr) data(\"dbces11\") g <- dbces11  #neighborhood inclusion  P <- g %>% neighborhood_inclusion(sparse = FALSE)  #without %>% operator: # P <- neighborhood_inclusion(g)  cent_scores <- data.frame(    degree=degree(g),    betweenness=round(betweenness(g),4),    closeness=round(closeness(g),4),    eigenvector=round(eigen_centrality(g)$vector,4),    subgraph=round(subgraph_centrality(g),4))  plot(rank_intervals(P),cent_scores = cent_scores) res <- exact_rank_prob(P) res ## Number of possible centrality rankings:  739200  ## Equivalence Classes (max. possible): 11 (11) ## - - - - - - - - - -  ## Rank Probabilities (rows:nodes/cols:ranks) ##            1          2          3          4          5           6          7 ## A 0.54545455 0.27272727 0.12121212 0.04545455 0.01298701 0.002164502 0.00000000 ## B 0.27272727 0.21818182 0.16969697 0.12727273 0.09090909 0.060606061 0.03636364 ## C 0.00000000 0.16363636 0.21818182 0.20909091 0.16883117 0.119047619 0.07272727 ## D 0.00000000 0.02727273 0.05151515 0.07272727 0.09090909 0.106060606 0.11818182 ## E 0.00000000 0.00000000 0.01818182 0.04545455 0.07532468 0.103463203 0.12727273 ## F 0.00000000 0.05454545 0.08484848 0.10000000 0.10649351 0.108658009 0.10909091 ## G 0.00000000 0.05454545 0.08484848 0.10000000 0.10649351 0.108658009 0.10909091 ## H 0.00000000 0.02727273 0.05151515 0.07272727 0.09090909 0.106060606 0.11818182 ## I 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909 0.090909091 0.09090909 ## J 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909 0.090909091 0.09090909 ## K 0.00000000 0.00000000 0.01818182 0.04545455 0.07532468 0.103463203 0.12727273 ##            8           9         10         11 ## A 0.00000000 0.000000000 0.00000000 0.00000000 ## B 0.01818182 0.006060606 0.00000000 0.00000000 ## C 0.03636364 0.012121212 0.00000000 0.00000000 ## D 0.12727273 0.133333333 0.13636364 0.13636364 ## E 0.14545455 0.157575758 0.16363636 0.16363636 ## F 0.10909091 0.109090909 0.10909091 0.10909091 ## G 0.10909091 0.109090909 0.10909091 0.10909091 ## H 0.12727273 0.133333333 0.13636364 0.13636364 ## I 0.09090909 0.090909091 0.09090909 0.09090909 ## J 0.09090909 0.090909091 0.09090909 0.09090909 ## K 0.14545455 0.157575758 0.16363636 0.16363636 ## - - - - - - - - - -  ## Relative Rank Probabilities (row ranked lower than col) ##            A          B         C         D         E         F         G ## A 0.00000000 0.66666667 1.0000000 0.9523810 1.0000000 1.0000000 1.0000000 ## B 0.33333333 0.00000000 0.6666667 1.0000000 0.9166667 0.8333333 0.8333333 ## C 0.00000000 0.33333333 0.0000000 0.7976190 1.0000000 0.7500000 0.7500000 ## D 0.04761905 0.00000000 0.2023810 0.0000000 0.5595238 0.4404762 0.4404762 ## E 0.00000000 0.08333333 0.0000000 0.4404762 0.0000000 0.3750000 0.3750000 ## F 0.00000000 0.16666667 0.2500000 0.5595238 0.6250000 0.0000000 0.5000000 ## G 0.00000000 0.16666667 0.2500000 0.5595238 0.6250000 0.5000000 0.0000000 ## H 0.04761905 0.00000000 0.2023810 0.5000000 0.5595238 0.4404762 0.4404762 ## I 0.14285714 0.25000000 0.3571429 0.6250000 0.6785714 0.5714286 0.5714286 ## J 0.14285714 0.25000000 0.3571429 0.6250000 0.6785714 0.5714286 0.5714286 ## K 0.00000000 0.08333333 0.0000000 0.4404762 0.5000000 0.3750000 0.3750000 ##           H         I         J         K ## A 0.9523810 0.8571429 0.8571429 1.0000000 ## B 1.0000000 0.7500000 0.7500000 0.9166667 ## C 0.7976190 0.6428571 0.6428571 1.0000000 ## D 0.5000000 0.3750000 0.3750000 0.5595238 ## E 0.4404762 0.3214286 0.3214286 0.5000000 ## F 0.5595238 0.4285714 0.4285714 0.6250000 ## G 0.5595238 0.4285714 0.4285714 0.6250000 ## H 0.0000000 0.3750000 0.3750000 0.5595238 ## I 0.6250000 0.0000000 0.5000000 0.6785714 ## J 0.6250000 0.5000000 0.0000000 0.6785714 ## K 0.4404762 0.3214286 0.3214286 0.0000000 ## - - - - - - - - - -  ## Expected Ranks (higher values are better) ##        A        B        C        D        E        F        G        H  ## 1.714286 3.000000 4.285714 7.500000 8.142857 6.857143 6.857143 7.500000  ##        I        J        K  ## 6.000000 6.000000 8.142857  ## - - - - - - - - - -  ## SD of Rank Probabilities ##         A         B         C         D         E         F         G         H  ## 0.9583148 1.8973666 1.7249667 2.5396850 2.1599320 2.7217941 2.7217941 2.5396850  ##         I         J         K  ## 3.1622777 3.1622777 2.1599320  ## - - - - - - - - - -"},{"path":"https://schochastics.github.io/netrankr/articles/probabilistic_cent.html","id":"rank-probabilities","dir":"Articles","previous_headings":"Exact Probabilities in the netrankr Package","what":"Rank Probabilities","title":"Probabilistic Centrality","text":"Instead insisting fixed ranks nodes given indices, can use rank probabilities assess likelihood certain rank. Formally, rank probabilities simply defined \\[ P(rk(u)=k)=\\frac{\\lvert \\{rk \\ \\mathcal{R}(\\leq) \\; : \\; rk(u)=k\\} \\rvert}{\\lvert \\mathcal{R}(\\leq) \\rvert}. \\] Rank probabilities given return value rank.prob exact_rank_prob() function. Entries rp[u,k] correspond \\(P(rk(u)=k)\\). interesting probabilities certainly \\(P(rk(u)=n)\\), likely node central. Recall previous section found five indices ranked \\(6,7,8,10\\) \\(11\\) top. probability tell us now, likely find index rank nodes top. case, node \\(11\\) highest probability central node.","code":"rp <- round(res$rank.prob,2) rp ##      1    2    3    4    5    6    7    8    9   10   11 ## A 0.55 0.27 0.12 0.05 0.01 0.00 0.00 0.00 0.00 0.00 0.00 ## B 0.27 0.22 0.17 0.13 0.09 0.06 0.04 0.02 0.01 0.00 0.00 ## C 0.00 0.16 0.22 0.21 0.17 0.12 0.07 0.04 0.01 0.00 0.00 ## D 0.00 0.03 0.05 0.07 0.09 0.11 0.12 0.13 0.13 0.14 0.14 ## E 0.00 0.00 0.02 0.05 0.08 0.10 0.13 0.15 0.16 0.16 0.16 ## F 0.00 0.05 0.08 0.10 0.11 0.11 0.11 0.11 0.11 0.11 0.11 ## G 0.00 0.05 0.08 0.10 0.11 0.11 0.11 0.11 0.11 0.11 0.11 ## H 0.00 0.03 0.05 0.07 0.09 0.11 0.12 0.13 0.13 0.14 0.14 ## I 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 ## J 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 0.09 ## K 0.00 0.00 0.02 0.05 0.08 0.10 0.13 0.15 0.16 0.16 0.16 rp[,11] ##    A    B    C    D    E    F    G    H    I    J    K  ## 0.00 0.00 0.00 0.14 0.16 0.11 0.11 0.14 0.09 0.09 0.16"},{"path":"https://schochastics.github.io/netrankr/articles/probabilistic_cent.html","id":"relative-rank-probabilities","dir":"Articles","previous_headings":"Exact Probabilities in the netrankr Package","what":"Relative Rank Probabilities","title":"Probabilistic Centrality","text":"cases, might necessarily interested complete ranking nodes, relative position subset nodes. idea leads relative rank probabilities, formally defined \\[ P(rk(u)\\leq rk(v))=\\frac{\\lvert \\{rk \\ \\mathcal{R}(\\leq) \\; : \\; rk(u)\\leq rk(v)\\} \\rvert}{\\lvert \\mathcal{R}(\\leq) \\rvert}. \\] Relative rank probabilities given return value relative.rank exact_rank_prob() function. Entries rrp[u,v] correspond \\(P(rk(u)\\leq rk(v))\\). value rrp[u,v] deviates \\(0.5\\) towards \\(1\\), confidence gain node \\(v\\) central node \\(u\\). ###Expected Ranks expected rank node centrality rankings defined expected value rank probability distribution. , \\[ \\rho(u)=\\sum_{k=1}^n k\\cdot P(rk(u)=k). \\] Expected ranks given return value expected.rank exact_rank_prob() function. reminder, higher numeric rank, central node . case, node \\(11\\) highest expected rank centrality ranking.","code":"rrp <- round(res$relative.rank,2) rrp ##      A    B    C    D    E    F    G    H    I    J    K ## A 0.00 0.67 1.00 0.95 1.00 1.00 1.00 0.95 0.86 0.86 1.00 ## B 0.33 0.00 0.67 1.00 0.92 0.83 0.83 1.00 0.75 0.75 0.92 ## C 0.00 0.33 0.00 0.80 1.00 0.75 0.75 0.80 0.64 0.64 1.00 ## D 0.05 0.00 0.20 0.00 0.56 0.44 0.44 0.50 0.38 0.38 0.56 ## E 0.00 0.08 0.00 0.44 0.00 0.38 0.38 0.44 0.32 0.32 0.50 ## F 0.00 0.17 0.25 0.56 0.62 0.00 0.50 0.56 0.43 0.43 0.62 ## G 0.00 0.17 0.25 0.56 0.62 0.50 0.00 0.56 0.43 0.43 0.62 ## H 0.05 0.00 0.20 0.50 0.56 0.44 0.44 0.00 0.38 0.38 0.56 ## I 0.14 0.25 0.36 0.62 0.68 0.57 0.57 0.62 0.00 0.50 0.68 ## J 0.14 0.25 0.36 0.62 0.68 0.57 0.57 0.62 0.50 0.00 0.68 ## K 0.00 0.08 0.00 0.44 0.50 0.37 0.37 0.44 0.32 0.32 0.00 ex_rk <- round(res$expected.rank,2) ex_rk ##    A    B    C    D    E    F    G    H    I    J    K  ## 1.71 3.00 4.29 7.50 8.14 6.86 6.86 7.50 6.00 6.00 8.14"},{"path":"https://schochastics.github.io/netrankr/articles/threshold_graph.html","id":"theoretical-background","dir":"Articles","previous_headings":"","what":"Theoretical Background","title":"Uniquely ranked graphs","text":"threshold graph graph, nodes pairwise comparable neighborhood inclusion. Formally, \\[ \\forall u,v \\V: N(u) \\subseteq N[v] \\; \\lor \\; N(v) \\subseteq N[u]. \\] According vignette, thus clear centrality indices induce ranking threshold graph. technical details threshold graphs results related centrality can found Schoch, David & Valente, Thomas W., & Brandes, Ulrik. (2017). Correlations among centrality indices class uniquely ranked graphs. Social Networks, 50, 46-54.(link)","code":""},{"path":"https://schochastics.github.io/netrankr/articles/threshold_graph.html","id":"uniquely-ranked-graphs-in-the-netrankr-package","dir":"Articles","previous_headings":"","what":"Uniquely Ranked Graphs in the netrankr Package","title":"Uniquely ranked graphs","text":"Threshold graphs \\(n\\) vertices can constructed iteratively sequence \\(0\\)’s \\(1\\)’s. \\(0\\), isolated vertex inserted \\(1\\) vertex connects previously inserted one’s. iterative process implemented threshold_graph function. parameter n used set desired number vertices. parameter p probability dominated vertex inserted step. parameter roughly equates density network. class threshold graphs includes various well-known graphs, instance star shaped complete networks. graphs can constructed p=0 p=1 respectively.  check pairs comparable neighborhood inclusion, can use function comparable_pairs. function computes density underlying undirected graph induced neighborhood-inclusion relation.","code":"library(netrankr) library(igraph) set.seed(1886) #for reproducibility g1 <- threshold_graph(500,0.4)  g2 <- threshold_graph(500,0.05)    c(round(graph.density(g1),2), round(graph.density(g2),2)) ## [1] 0.41 0.03 star <- threshold_graph(6,0)  complete <- threshold_graph(6,1) plot(star,vertex.label=NA,vertex.color=\"black\") plot(complete,vertex.label=NA,vertex.color=\"black\") g <- threshold_graph(10,0.4) P <- neighborhood_inclusion(g) comparable_pairs(P) ## [1] 1"},{"path":"https://schochastics.github.io/netrankr/articles/threshold_graph.html","id":"correlation-and-threshold-graphs","dir":"Articles","previous_headings":"","what":"Correlation and Threshold Graphs","title":"Uniquely ranked graphs","text":"construct random threshold graph calculate standard measures centrality included igraph package. expect, indices perfectly rank correlated since pairs nodes comparable neighborhood-inclusion. , however, obtain correlations equal one. due definition Kendall’s (tie corrected) \\(\\tau\\). going detail, consider following cases can arise comparing two scores indices x y. concordant: x[]>x[j] & y[]>y[j] x[]<x[j] & y[]<y[j] discordant: x[]>x[j] & y[]<y[j] x[]>x[j] & y[]<y[j] tied: x[]=x[j] & y[]=y[j] left/right ties: x[]=x[j] & y[]!=y[j] x[]!=x[j] & y[]=y[j] Kendall’s \\(\\tau\\) considers left right ties correlation reducing. two vertices tied one ranking, , correlations weakened. Left right ties , however, forbidden according neighborhood inclusion property. forbidden case discordant pairs. , \\(N(u)\\subseteq N[v]\\) can result \\(c(u)>c(v)\\) may result \\(c(u)=c(v)\\). Also, one can argue left right ties distinguish fine/coarse grained indices. netrankr comes function called compare_ranks calculates occurrences cases. Simply counting cases instead aggregating help circumvent problem possibly misinterpreting correlation measures. Notice high number right ties influences correlation measured Kendall’s \\(\\tau\\). However, exist discordant pairs pair indices. Although Kendall’s \\(\\tau\\) suggests correlations among indices can low, see exist discordant pairs threshold graphs.","code":"g <- threshold_graph(100,0.1)  cent.df <- data.frame(   degree=degree(g),   betweenness=betweenness(g),   closeness=closeness(g),   eigenvector=round(eigen_centrality(g)$vector,8),   subgraph=subgraph_centrality(g) ) cor.mat <- cor(round(cent.df,8),method=\"kendall\") cor.mat <- round(cor.mat,2) cor.mat ##             degree betweenness closeness eigenvector subgraph ## degree        1.00        0.52      1.00        1.00     0.96 ## betweenness   0.52        1.00      0.52        0.52     0.50 ## closeness     1.00        0.52      1.00        1.00     0.96 ## eigenvector   1.00        0.52      1.00        1.00     0.96 ## subgraph      0.96        0.50      0.96        0.96     1.00 comp <- compare_ranks(cent.df$degree,cent.df$betweenness) unlist(comp) ## concordant discordant       ties       left      right  ##       1209          0        464          0       3277 dis.pairs <- matrix(0,5,5) dis.pairs[1,] <- apply(cent.df,2,                        function(x)compare_ranks(cent.df$degree,x)$discordant) dis.pairs[2,] <- apply(cent.df,2,                        function(x)compare_ranks(cent.df$betweenness,x)$discordant) dis.pairs[3,] <- apply(cent.df,2,                        function(x)compare_ranks(cent.df$closeness,x)$discordant) dis.pairs[4,] <- apply(cent.df,2,                        function(x)compare_ranks(cent.df$eigenvector,x)$discordant) dis.pairs[5,] <- apply(cent.df,2,                        function(x)compare_ranks(cent.df$subgraph,x)$discordant) dis.pairs ##      [,1] [,2] [,3] [,4] [,5] ## [1,]    0    0    0    0    0 ## [2,]    0    0    0    0    0 ## [3,]    0    0    0    0    0 ## [4,]    0    0    0    0    0 ## [5,]    0    0    0    0    0"},{"path":"https://schochastics.github.io/netrankr/articles/threshold_graph.html","id":"distances-from-a-threshold-graph","dir":"Articles","previous_headings":"","what":"Distances from a threshold graph","title":"Uniquely ranked graphs","text":"always case artificial graph structures, rather unlikely encounter threshold graphs wild. best can hope close threshold graph. based intuition closer graph threshold graph, properties resemble one. closer , correlated assume centrality indices . away , disagreement find among indices. problematic point : define close threshold graph. depth discussion possible measures can found paper mentioned beginning vignette. netrankr implements one function can used assess distance arbitrary graphs threshold graphs. called majorization gap operates solely degree sequence determines number entries changed order obtain degree sequence threshold graph. Changing can, however, done arbitrarily. allowed operation lower degree one vertex simultaneously increase degree another. threshold graphs, measure obviously zero. default, majorization_gap normalized number edges. example, around 35% entries changed order obtain threshold graph. normalization done compare majorization gap across networks different sizes. obtain raw number changes, set norm=FALSE. majorization gap serves indicator much variance can expect rankings different centrality indices. lower , closer threshold graph one ranking possible. away , degrees freedom exist rank nodes differently generally observe lower correlations. details, , refer mentioned paper beginning.","code":"tg <- threshold_graph(200,0.2) majorization_gap(g) ## [1] 0 data(\"dbces11\") g <- dbces11  majorization_gap(g) ## [1] 0.3529412 majorization_gap(g,norm = FALSE) ## [1] 6"},{"path":"https://schochastics.github.io/netrankr/articles/use_case.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Use Case: Florentine Families","text":"tutorial, use famous florentine families dataset (Padget & Ansell, 1993). marriage links families together wealth attribute included netrankr package.  use dataset illustrate dominance based assessment centrality offers alternative approach centrality two ways: Medici universally central family? Using centrality explanatory variable (Can centrality explain wealth attribute?)","code":"data(\"florentine_m\") # Delete Pucci family (isolated) florentine_m <- delete_vertices(florentine_m, which(degree(florentine_m) == 0))  # plot the graph (label size proportional to wealth) set.seed(111) plot(florentine_m,   vertex.label.cex = V(florentine_m)$wealth * 0.01,   vertex.label.color = \"black\",   vertex.color = \"white\",   vertex.frame.color = \"gray\" )"},{"path":"https://schochastics.github.io/netrankr/articles/use_case.html","id":"most-central-family-index-approach","dir":"Articles","previous_headings":"","what":"Most central family (Index approach)","title":"Use Case: Florentine Families","text":"network often used benchmark new centrality indices. premise Medici always emerge one central (central). start applying standard centrality indices given igraph package. cases, Medici considered central family. However, possible find indices rank families top. example odd subgraph centrality, can assembled netrankr package. example, Strozzi family considered central family Medici ranked third. Although found \\(5\\) indices consider Medici central family, can guarantee, exist hundreds (thousands?) indices give entirely different result.","code":"cent.df <- data.frame(   degree = degree(florentine_m),   betweenness = betweenness(florentine_m),   closeness = closeness(florentine_m),   eigenvector = eigen_centrality(florentine_m)$vector,   subgraph = subgraph_centrality(florentine_m) )  # most central family according to the 5 indices V(florentine_m)$name[apply(cent.df, 2, which.max)] ## [1] \"Medici\" \"Medici\" \"Medici\" \"Medici\" \"Medici\" # odd subgraph centrality sc_odd <- florentine_m %>%   indirect_relations(type = \"walks\", FUN = walks_exp_odd) %>%   aggregate_positions(type = \"self\")  # family with highest score V(florentine_m)$name[which.max(sc_odd)] ## [1] \"Strozzi\""},{"path":"https://schochastics.github.io/netrankr/articles/use_case.html","id":"most-central-family-dominance-approach","dir":"Articles","previous_headings":"","what":"Most central family (Dominance approach)","title":"Use Case: Florentine Families","text":"start calculating neighborhood-inclusion preorder, general requirement centrality index. function comparable_pairs() can assess many pairs families already ordered, applying index. around 15% pairs families comparable, leaving 85% pairs families ordered (basically) arbitrarily. want visually assess dominance relations can use function dominance_graph().  Castellan family neither dominates dominated family. means, can find indices potentially rank top bottom, anything . better assess potential ranks nodes, can plot rank intervals  Observe big intervals , indicating ample scope rank families differently. intervals, however, give us rough estimate arbitrariness rank probabilities. get exact probabilities, use function exact_rank_prob(). 3,972,630,480 different possibilities rank families! (value stored res$lin.ext. ). means theoretically, can find almost 4 Billion indices rank families differently. rank probabilities families can found res$rank.prob. returned matrix rows families columns ranks. , entry row \\(u\\) column \\(k\\) gives probability \\(u\\) rank \\(k\\) (larger \\(k\\) indicate higher ranks) Mostly, interested probability central node network. , calculate probability families return one’s higher probability \\(0.1\\). Strozzi family, \\(0.13\\), highest probability top ranked, followed Medici \\(0.12\\). interested subset nodes, case maybe Strozzi Medici, can assess relative rank probabilities res$relative.rank. , probabilities returned matrix objects, entry row \\(u\\) column \\(v\\) gives probability \\(u\\) ranked \\(v\\). calculate probability Strozzi Medici. probability Strozzi less central Medici 0.52 thus close “fifty-fifty” chance. last result interest returned exact_rank_prob() expected ranks res$expected.rank. expected ranks, name indicates, returns ranks expect families centrality ranking. Although Strozzi higher probability central family, still expect Medici central. general assessment gives us general idea scope potential centrality analyses. possible rankings (case!) unreliable index driven approach can . explore detail following section.","code":"P <- neighborhood_inclusion(florentine_m) comparable_pairs(P) ## [1] 0.152381 d <- dominance_graph(P) V(d)$name <- V(florentine_m)$name set.seed(113) plot(d,   vertex.label.color = \"black\",   vertex.color = \"white\",   vertex.frame.color = \"gray\",   edge.arrow.size = 0.5 ) plot(rank_intervals(P)) res <- exact_rank_prob(P) top_rank_prob <- res$rank.prob[, 15] names(top_rank_prob) <- V(florentine_m)$name round(top_rank_prob[top_rank_prob > 0.1], 3) ##  Albizzi Guadagni   Medici Salviati  Strozzi  ##    0.109    0.106    0.123    0.111    0.133 id_strozzi <- which(V(florentine_m)$name == \"Strozzi\") id_medici <- which(V(florentine_m)$name == \"Medici\") res$relative.rank[id_strozzi, id_medici] ## [1] 0.5219845"},{"path":"https://schochastics.github.io/netrankr/articles/use_case.html","id":"centrality-as-explanatory-variable-index-approach","dir":"Articles","previous_headings":"","what":"Centrality as explanatory variable (Index approach)","title":"Use Case: Florentine Families","text":"Usually, simply interested ranking nodes, rather like use centrality explain certain node attributes. case, might interested question: “can index explain wealth families?”, already concrete idea “can proximity families explain wealth attribute?” “Proximity” can translated graph-theoretic concept shortest path distances, closeness centrality adequate candidate index. use pipeline approach netrankr package instead closeness() function igraph. reasons become evident next section. correlation closeness wealth (0.0882) far low constitute “proximity” related wealth. However, exist various indices, based shortest path distances graph. Refer literature details indices. highest correlation (0.1159) achieved residual closeness, however, still low conclude proximity related wealth. Besides already considered indices, exist one’s include free parameter. idea parameter can tuned maximize correlation index attribute consideration. , mathematical details can found respective literature. highest correlation generalized closeness 0.1159434 achieved \\(\\alpha\\)= 0.51 highest correlation decay centrality 0.1159434 achieved \\(\\alpha\\)=0.26 know accept index based shortest path distances explain wealth. , start craft new indices might yield better correlation wealth. However, enter dilemma mentioned end last section. find one, can certain might even better one . contrast, succeed, can guarantee exist index higher correlation.","code":"# Closeness c_C <- florentine_m %>%   indirect_relations(type = \"dist_sp\") %>%   aggregate_positions(type = \"invsum\")  cor(c_C, V(florentine_m)$wealth, method = \"kendall\") ## [1] 0.08823953 # harmonic closeness c_HC <- florentine_m %>%   indirect_relations(type = \"dist_sp\", FUN = dist_inv) %>%   aggregate_positions(type = \"sum\") # residual closeness (Dangalchev,2006) c_RC <- florentine_m %>%   indirect_relations(type = \"dist_sp\", FUN = dist_2pow) %>%   aggregate_positions(type = \"sum\")  # integration centrality (Valente & Foreman, 1998) dist_integration <- function(x) {   x <- 1 - (x - 1) / max(x) } c_IN <- florentine_m %>%   indirect_relations(type = \"dist_sp\", FUN = dist_integration) %>%   aggregate_positions(type = \"sum\")  c(   cor(c_HC, V(florentine_m)$wealth, method = \"kendall\"),   cor(c_RC, V(florentine_m)$wealth, method = \"kendall\"),   cor(c_IN, V(florentine_m)$wealth, method = \"kendall\") ) ## [1] 0.09756214 0.11594338 0.08823953 # generalized closeness (Agneessens et al.,2017) (alpha>0) sum(dist^-alpha) alpha <- c(seq(0.01, 0.99, 0.01), seq(1, 10, 0.1)) scores <-   sapply(alpha, function(x) {     florentine_m %>%       indirect_relations(type = \"dist_sp\", FUN = dist_dpow, alpha = x) %>%       aggregate_positions(type = \"sum\")   }) cors_gc <- apply(   scores, 2,   function(x) cor(x, V(florentine_m)$wealth, method = \"kendall\") )  res_gc <- c(max(cors_gc), alpha[which.max(cors_gc)])  # decay centrality (Jackson, 2010) (alpha in [0,1]) sum(alpha^dist) alpha <- seq(0.01, 0.99, 0.01) scores <-   sapply(alpha, function(x) {     florentine_m %>%       indirect_relations(type = \"dist_sp\", FUN = dist_powd, alpha = x) %>%       aggregate_positions(type = \"sum\")   }) cors_dc <- apply(   scores, 2,   function(x) cor(x, V(florentine_m)$wealth, method = \"kendall\") )  res_dc <- c(max(cors_dc), alpha[which.max(cors_dc)])"},{"path":"https://schochastics.github.io/netrankr/articles/use_case.html","id":"centrality-as-explanatory-variable-dominance-approach","dir":"Articles","previous_headings":"","what":"Centrality as explanatory variable (Dominance approach)","title":"Use Case: Florentine Families","text":"Since postulating connection proximity wealth, compute pairwise shortest path distances indirect relation interest calculate positional dominance relations. Note exactly pairs comparable neighborhood-inclusion. However, one additional assumption, able increase number comparable pairs significantly (thus reduce space potential rankings). summing distances various ways, done indices , assume families homogeneous. doesn’t matter small distance, just matters small. can safely comply assumption, can use positional dominance total homogeneity. important note, family dominated another premise, lower score distance based centrality index. number comparable pairs increased \\(0.15\\) \\(0.82\\), thus reducing space potential centrality rankings based distances significantly. proceed explore potential distance based ranking explain wealth perfectly. possible, families lower wealth dominate wealthier family. Otherwise always ranked higher, prohibiting perfect correlation. figure shows dominance relations directed graph, x coordinate nodes proportional wealth attribute y coordinate number dominated families. edge pointing left (shown red) denotes pair “wrongly” ordered families, .e. wealthy family dominated less wealthy one.  total, find \\(41\\) pairs (\\(39\\)% pairs). implies (potentially) quite far able explain wealth perfectly shortest path distances. following explore far away. start calculating rank intervals illustrate difference neighborhood-inclusion. intervals shrunk significantly even correspond single point two families (Pazzi Medici). implies matter distance based index use, Pazzi family always ranked last Medici always top. exact assessment use function exact_rank_prob(). total, 654 distance based rankings possible. huge reduction general case almost \\(4\\) billion possible. determine best possible correlation wealth distance based ranking, first need determine 654 rankings. purpose, rerun previous analysis .results=FALSE obtain necessary data structure. Now, can use function get_rankings() returns rankings matrix. can simply loop rankings calculate correlation ranking wealth attribute. highest achievable correlation 0.1546. can conclude, can distance based centrality index can reasonably explain wealth attribute. can additionally consider correlation degree wealth, calculated . correlation higher distance based index can . Thus, can additionally conclude marriage ties indicative wealth proximity marriage network.","code":"D <- florentine_m %>%   indirect_relations(type = \"dist_sp\") %>%   positional_dominance(benefit = F)  comparable_pairs(D) ## [1] 0.152381 D <- florentine_m %>%   indirect_relations(type = \"dist_sp\") %>%   positional_dominance(benefit = F, map = T)  comparable_pairs(D) ## [1] 0.8190476 plot(rank_intervals(D)) res <- exact_rank_prob(D) res <- exact_rank_prob(D, only.results = FALSE) all_ranks <- get_rankings(res) dim(all_ranks) ## [1]  15 654 dist_cor <- apply(   all_ranks, 2,   function(x) cor(V(florentine_m)$wealth, x, method = \"kendall\") ) c(max_cor = max(dist_cor), mean_cor = mean(dist_cor)) ##    max_cor   mean_cor  ## 0.15459118 0.04600506 cor(degree(florentine_m), V(florentine_m)$wealth, method = \"kendall\") ## [1] 0.1958605"},{"path":"https://schochastics.github.io/netrankr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Schoch. Author, maintainer. Julian Müller. Contributor.","code":""},{"path":"https://schochastics.github.io/netrankr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schoch, D., (2022). netrankr: R package total, partial, probabilistic rankings networks. Journal Open Source Software, 7(77), 4563","code":"@Article{,   title = {netrankr: An R package for total, partial, and probabilistic rankings in networks},   author = {David Schoch},   journal = {Journal of Open Source Software},   number = {77},   pages = {4563},   year = {2022}, }"},{"path":[]},{"path":"https://schochastics.github.io/netrankr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Analyzing Partial Rankings in Networks","text":"literature flooded centrality indices new ones introduced regular basis. Although exist several theoretical empirical guidelines use certain indices, still exists plenty ambiguity concept network centrality. date, network centrality nothing applying indices network:  degree freedom choice index. package comes Rstudio addin (index_builder()), allows build choose 20 different indices. Blindly (ab)using function highly discouraged! netrankr package based idea centrality conglomeration indices. Decomposing series microsteps offers posibility gradually add ideas centrality, without succumbing trial--error approaches. , allows alternative assessment methods can general index-driven approach:  new approach centered around concept positions, defined relations potential attributes node network. aggregation relations leads definition indices. However, positions can also compared via positional dominance, leading partial centrality rankings option calculate probabilistic centrality rankings. detailed theoretical background, consult Literature end page.","code":""},{"path":"https://schochastics.github.io/netrankr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyzing Partial Rankings in Networks","text":"install CRAN: install developer version github:","code":"install.packages(\"netrankr\") # install.packages(\"devtools\") devtools::install_github(\"schochastics/netrankr\")"},{"path":"https://schochastics.github.io/netrankr/index.html","id":"simple-example","dir":"","previous_headings":"","what":"Simple Example","title":"Analyzing Partial Rankings in Networks","text":"example briefly explains functionality package difference index driven approach. realistic application see use case vignette. work following small graph.  Say interested central node graph simply compute standard centrality scores igraph package. Defining centrality indices netrankr package explained centrality indices vignette.  can see, index assigns highest value different vertex. general assessment starts calculating neighborhood inclusion preorder. Schoch & Brandes (2016) showed N(u) ⊆ N[v] (.e. P[u,v]=1) implies c(u) ≤ c(v) centrality indices c, defined via specific path algebras. include many well-known measures like closeness (variants), betweenness (variants) well many walk-based indices (eigenvector subgraph centrality, total communicability,…). Neighborhood-inclusion defines partial ranking set nodes. ranking accordance partial ranking yields proper centrality ranking. ranking can thus potentially outcome centrality index. Using rank intervals, can examine minimal maximal possible rank node. bigger intervals , freedom exists indices rank nodes differently.  potential ranks nodes uniformly distributed intervals. get exact probabilities, function exact_rank_prob() can used. graph g can therefore come 739,200 indices rank nodes differently. rank.prob contains probabilities node occupy certain rank. instance, probability node central one follows. relative.rank contains relative rank probabilities. entry relative.rank[u,v] indicates likely v central u. expected.ranks contains expected centrality ranks nodes. derived basis rank.prob. higher value, central node expected . Note: set rankings grows exponentially number nodes exact calculation becomes infeasible quite quickly approximations need used. Check benchmark results guidelines.","code":"library(igraph) library(netrankr)  data(\"dbces11\") g <- dbces11 cent_scores <- data.frame(     degree = degree(g),     betweenness = round(betweenness(g), 4),     closeness = round(closeness(g), 4),     eigenvector = round(eigen_centrality(g)$vector, 4),     subgraph = round(subgraph_centrality(g), 4) )  # What are the most central nodes for each index? apply(cent_scores, 2, which.max) #>      degree betweenness   closeness eigenvector    subgraph  #>          11           8           6           7          10 P <- neighborhood_inclusion(g) P #>    1 2 3 4 5 6 7 8 9 10 11 #> 1  0 0 1 0 1 1 1 0 0  0  1 #> 2  0 0 0 1 0 0 0 1 0  0  0 #> 3  0 0 0 0 1 0 0 0 0  0  1 #> 4  0 0 0 0 0 0 0 0 0  0  0 #> 5  0 0 0 0 0 0 0 0 0  0  0 #> 6  0 0 0 0 0 0 0 0 0  0  0 #> 7  0 0 0 0 0 0 0 0 0  0  0 #> 8  0 0 0 0 0 0 0 0 0  0  0 #> 9  0 0 0 0 0 0 0 0 0  0  0 #> 10 0 0 0 0 0 0 0 0 0  0  0 #> 11 0 0 0 0 0 0 0 0 0  0  0 plot(rank_intervals(P), cent_scores = cent_scores, ties.method = \"average\") res <- exact_rank_prob(P) res #> Number of possible centrality rankings:  739200  #> Equivalence Classes (max. possible): 11 (11) #> - - - - - - - - - -  #> Rank Probabilities (rows:nodes/cols:ranks) #>            1         2         3         4         5         6         7 #> 1  0.5454545 0.2727273 0.1212121 0.0454545 0.0129870 0.0021645 0.0000000 #> 2  0.2727273 0.2181818 0.1696970 0.1272727 0.0909091 0.0606061 0.0363636 #> 3  0.0000000 0.1636364 0.2181818 0.2090909 0.1688312 0.1190476 0.0727273 #> 4  0.0000000 0.0272727 0.0515152 0.0727273 0.0909091 0.1060606 0.1181818 #> 5  0.0000000 0.0000000 0.0181818 0.0454545 0.0753247 0.1034632 0.1272727 #> 6  0.0000000 0.0545455 0.0848485 0.1000000 0.1064935 0.1086580 0.1090909 #> 7  0.0000000 0.0545455 0.0848485 0.1000000 0.1064935 0.1086580 0.1090909 #> 8  0.0000000 0.0272727 0.0515152 0.0727273 0.0909091 0.1060606 0.1181818 #> 9  0.0909091 0.0909091 0.0909091 0.0909091 0.0909091 0.0909091 0.0909091 #> 10 0.0909091 0.0909091 0.0909091 0.0909091 0.0909091 0.0909091 0.0909091 #> 11 0.0000000 0.0000000 0.0181818 0.0454545 0.0753247 0.1034632 0.1272727 #>            8          9        10        11 #> 1  0.0000000 0.00000000 0.0000000 0.0000000 #> 2  0.0181818 0.00606061 0.0000000 0.0000000 #> 3  0.0363636 0.01212121 0.0000000 0.0000000 #> 4  0.1272727 0.13333333 0.1363636 0.1363636 #> 5  0.1454545 0.15757576 0.1636364 0.1636364 #> 6  0.1090909 0.10909091 0.1090909 0.1090909 #> 7  0.1090909 0.10909091 0.1090909 0.1090909 #> 8  0.1272727 0.13333333 0.1363636 0.1363636 #> 9  0.0909091 0.09090909 0.0909091 0.0909091 #> 10 0.0909091 0.09090909 0.0909091 0.0909091 #> 11 0.1454545 0.15757576 0.1636364 0.1636364 #> - - - - - - - - - -  #> Relative Rank Probabilities (row ranked lower than col) #>           1         2        3        4        5        6        7        8 #> 1  0.000000 0.6666667 1.000000 0.952381 1.000000 1.000000 1.000000 0.952381 #> 2  0.333333 0.0000000 0.666667 1.000000 0.916667 0.833333 0.833333 1.000000 #> 3  0.000000 0.3333333 0.000000 0.797619 1.000000 0.750000 0.750000 0.797619 #> 4  0.047619 0.0000000 0.202381 0.000000 0.559524 0.440476 0.440476 0.500000 #> 5  0.000000 0.0833333 0.000000 0.440476 0.000000 0.375000 0.375000 0.440476 #> 6  0.000000 0.1666667 0.250000 0.559524 0.625000 0.000000 0.500000 0.559524 #> 7  0.000000 0.1666667 0.250000 0.559524 0.625000 0.500000 0.000000 0.559524 #> 8  0.047619 0.0000000 0.202381 0.500000 0.559524 0.440476 0.440476 0.000000 #> 9  0.142857 0.2500000 0.357143 0.625000 0.678571 0.571429 0.571429 0.625000 #> 10 0.142857 0.2500000 0.357143 0.625000 0.678571 0.571429 0.571429 0.625000 #> 11 0.000000 0.0833333 0.000000 0.440476 0.500000 0.375000 0.375000 0.440476 #>           9       10       11 #> 1  0.857143 0.857143 1.000000 #> 2  0.750000 0.750000 0.916667 #> 3  0.642857 0.642857 1.000000 #> 4  0.375000 0.375000 0.559524 #> 5  0.321429 0.321429 0.500000 #> 6  0.428571 0.428571 0.625000 #> 7  0.428571 0.428571 0.625000 #> 8  0.375000 0.375000 0.559524 #> 9  0.000000 0.500000 0.678571 #> 10 0.500000 0.000000 0.678571 #> 11 0.321429 0.321429 0.000000 #> - - - - - - - - - -  #> Expected Ranks (higher values are better) #>       1       2       3       4       5       6       7       8       9      10  #> 1.71429 3.00000 4.28571 7.50000 8.14286 6.85714 6.85714 7.50000 6.00000 6.00000  #>      11  #> 8.14286  #> - - - - - - - - - -  #> SD of Rank Probabilities #>        1        2        3        4        5        6        7        8  #> 0.958315 1.897367 1.724967 2.539685 2.159932 2.721794 2.721794 2.539685  #>        9       10       11  #> 3.162278 3.162278 2.159932  #> - - - - - - - - - - round(res$rank.prob[, 11], 2) #>    1    2    3    4    5    6    7    8    9   10   11  #> 0.00 0.00 0.00 0.14 0.16 0.11 0.11 0.14 0.09 0.09 0.16 # How likely is it, that 6 is more central than 3? round(res$relative.rank[3, 6], 2) #> [1] 0.75 round(res$expected.rank, 2) #>    1    2    3    4    5    6    7    8    9   10   11  #> 1.71 3.00 4.29 7.50 8.14 6.86 6.86 7.50 6.00 6.00 8.14"},{"path":"https://schochastics.github.io/netrankr/index.html","id":"theoretical-background","dir":"","previous_headings":"","what":"Theoretical Background","title":"Analyzing Partial Rankings in Networks","text":"netrankr based series papers appeared recent years. want learn theoretical background package, consult following literature: Schoch, David. (2018). Centrality without Indices: Partial rankings rank Probabilities networks. Social Networks, 54, 50-60.(link) Schoch, David & Valente, Thomas W., & Brandes, Ulrik. (2017). Correlations among centrality indices class uniquely ranked graphs. Social Networks, 50, 46-54.(link) Schoch, David & Brandes, Ulrik. (2016). Re-conceptualizing centrality social networks. European Journal Appplied Mathematics, 27(6), 971–985. (link) Brandes, Ulrik. (2016). Network Positions. Methodological Innovations, 9, 2059799116630650. (link)","code":""},{"path":"https://schochastics.github.io/netrankr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Analyzing Partial Rankings in Networks","text":"Please note netrankr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantification of (indirect) relations — aggregate_positions","title":"Quantification of (indirect) relations — aggregate_positions","text":"Function aggregate positions defined via indirect relations construct centrality scores.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantification of (indirect) relations — aggregate_positions","text":"","code":"aggregate_positions(tau_x, type = \"sum\")"},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantification of (indirect) relations — aggregate_positions","text":"tau_x Numeric matrix containing indirect relations calculated indirect_relations. type String indicating type aggregation used. See Details options.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantification of (indirect) relations — aggregate_positions","text":"Scores index defined indirect relation tau_x used aggregation type.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantification of (indirect) relations — aggregate_positions","text":"predefined functions mainly wrappers around base R functions. type='sum', instance, equivalent rowSums(). non-base functions type='invsum' calculates inverse type='sum'. type='self' mostly useful walk based relations, e.g. count closed walks. self explanatory options type='mean', type='min', type='max' type='prod'.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantification of (indirect) relations — aggregate_positions","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/aggregate_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantification of (indirect) relations — aggregate_positions","text":"","code":"library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union library(magrittr)  data(\"dbces11\") # degree dbces11 %>%     indirect_relations(type = \"adjacency\") %>%     aggregate_positions(type = \"sum\") #> A B C D E F G H I J K  #> 1 1 2 2 3 4 4 4 4 4 5   # closeness centrality dbces11 %>%     indirect_relations(type = \"dist_sp\") %>%     aggregate_positions(type = \"invsum\") #>          A          B          C          D          E          F          G  #> 0.03703704 0.02941176 0.04000000 0.04000000 0.05000000 0.05882353 0.05263158  #>          H          I          J          K  #> 0.05555556 0.05555556 0.05263158 0.05555556   # betweenness centrality dbces11 %>%     indirect_relations(type = \"depend_sp\") %>%     aggregate_positions(type = \"sum\") #>         A         B         C         D         E         F         G         H  #>  0.000000  0.000000  0.000000 18.000000  7.666667 19.666667  5.333333 32.666667  #>         I         J         K  #> 14.666667  2.666667 29.333333   # eigenvector centrality dbces11 %>%     indirect_relations(type = \"walks\", FUN = walks_limit_prop) %>%     aggregate_positions(type = \"sum\") #>         A         B         C         D         E         F         G         H  #> 0.2751607 0.0786437 0.4610603 0.2941027 0.6952060 1.1990379 1.2177246 1.0212076  #>         I         J         K  #> 1.1097768 1.2160775 1.0290143   # subgraph centrality dbces11 %>%     indirect_relations(type = \"walks\", FUN = walks_exp) %>%     aggregate_positions(type = \"self\") #>        A        B        C        D        E        F        G        H  #> 1.825100 1.595400 3.148571 2.423091 4.387127 7.807257 7.939410 6.672783  #>        I        J        K  #> 7.032672 8.242124 7.389559"},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximation of expected ranks — approx_rank_expected","title":"Approximation of expected ranks — approx_rank_expected","text":"Implements variety functions approximate expected ranks partial rankings.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximation of expected ranks — approx_rank_expected","text":"","code":"approx_rank_expected(P, method = \"lpom\")"},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximation of expected ranks — approx_rank_expected","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance. method String indicating method used. see Details.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximation of expected ranks — approx_rank_expected","text":"vector containing approximated expected ranks.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximation of expected ranks — approx_rank_expected","text":"method parameter can set lpom local partial order model glpom extension local partial order model. loof1 based connection relative rank probabilities. loof2 extension previous method. methods performs best depends structure size partial ranking. See vignette(\"benchmarks\",package=\"netrankr\") details.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximation of expected ranks — approx_rank_expected","text":"Brüggemann R., Simon, U., Mey,S, 2005. Estimation averaged ranks extended local partial order models. MATCH Commun. Math. Comput. Chem., 54:489-518. Brüggemann, R. Carlsen, L., 2011. improved estimation averaged ranks partial orders. MATCH Commun. Math. Comput. Chem., 65(2):383-414. De Loof, L., De Baets, B., De Meyer, H., 2011. Approximation Average Ranks Posets. MATCH Commun. Math. Comput. Chem., 66:219-229.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximation of expected ranks — approx_rank_expected","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_expected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximation of expected ranks — approx_rank_expected","text":"","code":"P <- matrix(c(0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, rep(0, 10)), 5, 5, byrow = TRUE) # Exact result exact_rank_prob(P)$expected.rank #>       V1       V2       V3       V4       V5  #> 1.333333 2.111111 2.888889 4.222222 4.444444   approx_rank_expected(P, method = \"lpom\") #> [1] 1.2 2.0 3.0 4.5 4.5 approx_rank_expected(P, method = \"glpom\") #> [1] 1.250000 2.166667 2.833333 4.333333 4.416667"},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximation of relative rank probabilities — approx_rank_relative","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"Approximate relative rank probabilities \\(P(rk(u)<rk(v))\\). network context, \\(P(rk(u)<rk(v))\\) probability u less central v, given partial ranking P.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"","code":"approx_rank_relative(P, iterative = TRUE, num.iter = 10)"},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance. iterative Logical scalar iterative approximation used. num.iter Number iterations used. defaults 10 (see Details).","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"matrix containing approximation relative rank probabilities. relative.rank[,j] probability ranked lower j","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"iterative approach generally gives better approximations non iterative, slightly. default number iterations based observation, approximation improve significantly beyond value. observation, however, based small networks increasing large network may yield better results. See vignette(\"benchmarks\",package=\"netrankr\") details.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"De Loof, K. De Baets, B De Meyer, H., 2008. Properties mutual rank probabilities partially ordered sets. Multicriteria Ordering Ranking: Partial Orders, Ambiguities Applied Issues, 145-165.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/approx_rank_relative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximation of relative rank probabilities — approx_rank_relative","text":"","code":"P <- matrix(c(0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, rep(0, 10)), 5, 5, byrow = TRUE) P #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    1 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 approx_rank_relative(P, iterative = FALSE) #>           [,1]      [,2]      [,3] [,4]      [,5] #> [1,] 0.0000000 0.3333333 1.0000000 1.00 1.0000000 #> [2,] 0.6666667 0.0000000 0.3333333 1.00 0.1428571 #> [3,] 0.0000000 0.6666667 0.0000000 0.25 1.0000000 #> [4,] 0.0000000 0.0000000 0.7500000 0.00 0.5000000 #> [5,] 0.0000000 0.8571429 0.0000000 0.50 0.0000000 approx_rank_relative(P, iterative = TRUE) #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.0000000 0.6858378 1.0000000 1.0000000 1.0000000 #> [2,] 0.3141622 0.0000000 0.6026415 1.0000000 0.8103500 #> [3,] 0.0000000 0.3973585 0.0000000 0.7130124 1.0000000 #> [4,] 0.0000000 0.0000000 0.2869876 0.0000000 0.5313942 #> [5,] 0.0000000 0.1896500 0.0000000 0.4686058 0.0000000"},{"path":"https://schochastics.github.io/netrankr/reference/as.matrix.netrankr_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract probabilities from netrankr_full object — as.matrix.netrankr_full","title":"Extract probabilities from netrankr_full object — as.matrix.netrankr_full","text":"extract probabilities matrices result object obtained exact_rank_prob","code":""},{"path":"https://schochastics.github.io/netrankr/reference/as.matrix.netrankr_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract probabilities from netrankr_full object — as.matrix.netrankr_full","text":"","code":"# S3 method for netrankr_full as.matrix(x, type = \"rank\", ...)"},{"path":"https://schochastics.github.io/netrankr/reference/as.matrix.netrankr_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract probabilities from netrankr_full object — as.matrix.netrankr_full","text":"x netrankr_full object type probabilities return. \"rank\" rank probabilities, \"relative\" relative rank probabilities \"expected\" expected rank probabilities variants ... additional parameters .matrix","code":""},{"path":"https://schochastics.github.io/netrankr/reference/as.matrix.netrankr_full.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract probabilities from netrankr_full object — as.matrix.netrankr_full","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/comparable_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparable pairs in a partial order — comparable_pairs","title":"Comparable pairs in a partial order — comparable_pairs","text":"Calculates fraction comparable pairs partial order.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/comparable_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparable pairs in a partial order — comparable_pairs","text":"","code":"comparable_pairs(P)"},{"path":"https://schochastics.github.io/netrankr/reference/comparable_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparable pairs in a partial order — comparable_pairs","text":"P partial order matrix object, e.g. calculated neighborhood_inclusion positional_dominance.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/comparable_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparable pairs in a partial order — comparable_pairs","text":"Fraction comparable pairs P.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/comparable_pairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparable pairs in a partial order — comparable_pairs","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/comparable_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparable pairs in a partial order — comparable_pairs","text":"","code":"library(igraph) g <- sample_gnp(100, 0.1) P <- neighborhood_inclusion(g) comparable_pairs(P) #> [1] 0 # All pairs of vertices are comparable in a threshold graph tg <- threshold_graph(100, 0.3) P <- neighborhood_inclusion(g) comparable_pairs(P) #> [1] 0"},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Count occurrences of pairs in rankings — compare_ranks","title":"Count occurrences of pairs in rankings — compare_ranks","text":"Counts number concordant, discordant (left/right) ties two rankings.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count occurrences of pairs in rankings — compare_ranks","text":"","code":"compare_ranks(x, y)"},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count occurrences of pairs in rankings — compare_ranks","text":"x numeric vector. y numeric vector length x.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count occurrences of pairs in rankings — compare_ranks","text":"list containing concordant number concordant pairs: x[] > x[j] y[] > y[j] discordant number discordant pairs: x[] > x[j] y[] < y[j] ties number tied pairs:  x[] == x[j] y[] == y[j] left number left ties: x[] == x[j] y[] != y[j] right number right ties: x[] != x[j] y[] == y[j]","code":""},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count occurrences of pairs in rankings — compare_ranks","text":"Explicitly calculating number occurring cases robust using correlation indices given cor function. Especially left right ties can significantly alter correlations.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Count occurrences of pairs in rankings — compare_ranks","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/compare_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count occurrences of pairs in rankings — compare_ranks","text":"","code":"library(igraph) tg <- threshold_graph(100, 0.2) compare_ranks(degree(tg), closeness(tg)) # only concordant pairs #> $concordant #> [1] 4427 #>  #> $discordant #> [1] 0 #>  #> $ties #> [1] 523 #>  #> $left #> [1] 0 #>  #> $right #> [1] 0 #>  compare_ranks(degree(tg), betweenness(tg)) # no discordant pairs #> $concordant #> [1] 1463 #>  #> $discordant #> [1] 0 #>  #> $ties #> [1] 523 #>  #> $left #> [1] 0 #>  #> $right #> [1] 2964 #>  ## Rank Correlation cor(degree(tg), closeness(tg), method = \"kendall\") # 1 #> [1] 1 cor(degree(tg), betweenness(tg), method = \"kendall\") # not 1, although no discordant pairs #> [1] 0.574867"},{"path":"https://schochastics.github.io/netrankr/reference/dbces11.html","id":null,"dir":"Reference","previous_headings":"","what":"dbces11 graph — dbces11","title":"dbces11 graph — dbces11","text":"Smallest graph (11 nodes 17 edges) centers according (d)egree, (b)etweenness, (c)loseness, (e)igenvector centrality, (s)ubgraph centrality different.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/dbces11.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dbces11 graph — dbces11","text":"","code":"dbces11"},{"path":"https://schochastics.github.io/netrankr/reference/dbces11.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dbces11 graph — dbces11","text":"igraph object","code":""},{"path":"https://schochastics.github.io/netrankr/reference/dominance_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial ranking as directed graph — dominance_graph","title":"Partial ranking as directed graph — dominance_graph","text":"Turns partial ranking directed graph. edge (u,v) present P[u,v]=1, meaning u dominated v.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/dominance_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial ranking as directed graph — dominance_graph","text":"","code":"dominance_graph(P)"},{"path":"https://schochastics.github.io/netrankr/reference/dominance_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial ranking as directed graph — dominance_graph","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/dominance_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial ranking as directed graph — dominance_graph","text":"Directed graph igraph object.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/dominance_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Partial ranking as directed graph — dominance_graph","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/dominance_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial ranking as directed graph — dominance_graph","text":"","code":"library(igraph) g <- threshold_graph(20, 0.1) P <- neighborhood_inclusion(g) d <- dominance_graph(P) if (FALSE) { plot(d) }  # to reduce overplotting use transitive reduction P <- transitive_reduction(P) d <- dominance_graph(P) if (FALSE) { plot(d) }"},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Probabilistic centrality rankings — exact_rank_prob","title":"Probabilistic centrality rankings — exact_rank_prob","text":"Performs complete exact rank analysis given partial ranking. includes rank probabilities, relative rank probabilities expected ranks.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probabilistic centrality rankings — exact_rank_prob","text":"","code":"exact_rank_prob(P, only.results = TRUE, verbose = FALSE, force = FALSE)"},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probabilistic centrality rankings — exact_rank_prob","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance. .results Logical. return results (default) additionally ideal tree lattice FALSE. verbose Logical. diagnostics printed. Defaults FALSE. force Logical. FALSE (default), stops analysis partial ranking 40 elements less 0.4 comparable pairs. change know .","code":""},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probabilistic centrality rankings — exact_rank_prob","text":"lin.ext Number possible rankings extend P. mse Array giving equivalence classes P. rank.prob Matrix containing rank probabilities: rank.prob[u,k] probability u rank k. relative.rank Matrix containing relative rank probabilities: relative.rank[u,v] probability u ranked lower v. expected.rank Expected ranks nodes centrality ranking. rank.spread Standard deviation ranking probabilities. topo.order Random ranking used build lattice ideals (.results = FALSE). tree Adjacency list (incoming) tree ideals (.results = FALSE). lattice Adjacency list (incoming) lattice ideals (.results = FALSE). ideals List order ideals (.results = FALSE). cases, higher numerical ranks imply higher position ranking. , lowest ranked node rank 1.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probabilistic centrality rankings — exact_rank_prob","text":"function derives rank probabilities given partial ranking (instance returned neighborhood_inclusion positional_dominance). includes calculation expected ranks, (relative) rank probabilities number possible rankings. Note set rankings grows exponentially number elements exact calculation becomes infeasible quite quickly approximations need used. See vignette(\"benchmarks\") guidelines approx_rank_relative, approx_rank_expected, mcmc_rank_prob approximative methods.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Probabilistic centrality rankings — exact_rank_prob","text":"De Loof, K. 2009. Efficient computation rank probabilities posets. Phd thesis, Ghent University. De Loof, K., De Meyer, H. De Baets, B., 2006. Exploiting lattice ideals representation poset. Fundamenta Informaticae, 71(2,3):309-321.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probabilistic centrality rankings — exact_rank_prob","text":"David Schoch, Julian Müller","code":""},{"path":"https://schochastics.github.io/netrankr/reference/exact_rank_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probabilistic centrality rankings — exact_rank_prob","text":"","code":"P <- matrix(c(0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, rep(0, 10)), 5, 5, byrow = TRUE) P #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    1 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 res <- exact_rank_prob(P)  # a warning is displayed if only one ranking is possible tg <- threshold_graph(20, 0.2) P <- neighborhood_inclusion(tg) res <- exact_rank_prob(P) #> Warning: P is already a ranking. #> Expected Ranks correspond to the only possible ranking."},{"path":"https://schochastics.github.io/netrankr/reference/florentine_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Florentine family marriage network — florentine_m","title":"Florentine family marriage network — florentine_m","text":"Florentine family marriage network","code":""},{"path":"https://schochastics.github.io/netrankr/reference/florentine_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Florentine family marriage network — florentine_m","text":"","code":"florentine_m"},{"path":"https://schochastics.github.io/netrankr/reference/florentine_m.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Florentine family marriage network — florentine_m","text":"igraph object containing marriage links florentine families","code":""},{"path":"https://schochastics.github.io/netrankr/reference/florentine_m.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Florentine family marriage network — florentine_m","text":"Padgett, J.F. Ansell, C.K., 1993. Robust Action Rise Medici, 1400-1434. American Journal Sociology, 98(6), 1259-1319.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":null,"dir":"Reference","previous_headings":"","what":"Rankings that extend a partial ranking — get_rankings","title":"Rankings that extend a partial ranking — get_rankings","text":"Returns possible rankings extend partial ranking.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rankings that extend a partial ranking — get_rankings","text":"","code":"get_rankings(data, force = FALSE)"},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rankings that extend a partial ranking — get_rankings","text":"data List returned exact_rank_prob run .results = FALSE force Logical scalar. Stops function number rankings large. change TRUE know ","code":""},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rankings that extend a partial ranking — get_rankings","text":"matrix containing ranks nodes possible rankings.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rankings that extend a partial ranking — get_rankings","text":"ith row matrix contains rank node possible rankings accordance partial ranking P. lowest rank possible associated 1.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rankings that extend a partial ranking — get_rankings","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/get_rankings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rankings that extend a partial ranking — get_rankings","text":"","code":"P <- matrix(c(0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, rep(0, 10)), 5, 5, byrow = TRUE) P #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    1    1 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 res <- exact_rank_prob(P, only.results = FALSE) get_rankings(res) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    1    1    2    1    1    1    2    1    2 #> [2,]    3    2    1    4    3    2    1    2    1 #> [3,]    2    3    3    2    2    3    3    4    4 #> [4,]    5    5    5    5    4    4    4    3    3 #> [5,]    4    4    4    3    5    5    5    5    5"},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperbolic (centrality) index — hyperbolic_index","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"hyperbolic index index considers closed walks even odd length induced neighborhoods vertex.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"","code":"hyperbolic_index(g, type = \"odd\")"},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"g igraph object. type string. 'even' even length walks considered. 'odd' (Default) odd length walks used.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"vector containing centrality scores.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"hyperbolic index illustrative index used serious analysis. purpose show enough mathematical trickery, desired result can obtained centrality indices used.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/hyperbolic_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperbolic (centrality) index — hyperbolic_index","text":"","code":"library(igraph)  data(\"dbces11\") hyperbolic_index(dbces11, type = \"odd\") #>  [1] 0.000000e+00 0.000000e+00 1.276458e+00 4.218847e-15 9.186479e-01 #>  [6] 3.554977e+00 3.554977e+00 1.925897e+00 1.925897e+00 5.995581e+00 #> [11] 1.501126e+00 hyperbolic_index(dbces11, type = \"even\") #>  [1]  3.086161  3.086161  6.848357  3.570911  6.227501 11.664512 11.664512 #>  [8]  8.585124  8.585124 16.291922  7.755459"},{"path":"https://schochastics.github.io/netrankr/reference/incomparable_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Incomparable pairs in a partial order — incomparable_pairs","title":"Incomparable pairs in a partial order — incomparable_pairs","text":"Calculates fraction incomparable pairs partial order.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/incomparable_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incomparable pairs in a partial order — incomparable_pairs","text":"","code":"incomparable_pairs(P)"},{"path":"https://schochastics.github.io/netrankr/reference/incomparable_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incomparable pairs in a partial order — incomparable_pairs","text":"P partial order matrix object, e.g. calculated neighborhood_inclusion positional_dominance.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/incomparable_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incomparable pairs in a partial order — incomparable_pairs","text":"Fraction incomparable pairs P.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/incomparable_pairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Incomparable pairs in a partial order — incomparable_pairs","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/incomparable_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Incomparable pairs in a partial order — incomparable_pairs","text":"","code":"library(igraph) g <- sample_gnp(100, 0.1) P <- neighborhood_inclusion(g) comparable_pairs(P) #> [1] 0 # All pairs of vertices are comparable in a threshold graph tg <- threshold_graph(100, 0.3) P <- neighborhood_inclusion(g) comparable_pairs(P) #> [1] 0"},{"path":"https://schochastics.github.io/netrankr/reference/index_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Centrality Index Builder — index_builder","title":"Centrality Index Builder — index_builder","text":"shiny gadget can used build centrality indices based specific indirect relations, transformations aggregation functions. use dropdown menus select components make index. Depending choices, options available later stages. end, code inserted current script use index","code":""},{"path":"https://schochastics.github.io/netrankr/reference/index_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centrality Index Builder — index_builder","text":"","code":"index_builder()"},{"path":"https://schochastics.github.io/netrankr/reference/index_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centrality Index Builder — index_builder","text":"code calculate specified index.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect relations in a network — indirect_relations","title":"Indirect relations in a network — indirect_relations","text":"Derive indirect relations given network. Observed relations, like presents absence relation, commonly center analysis, transformed new set indirect relation like shortest path distances among nodes. transformations usually implicit step centrality indices used. Making step explicit gives possibilities, example calculating partial centrality rankings positional_dominance.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect relations in a network — indirect_relations","text":"","code":"indirect_relations(   g,   type = \"dist_sp\",   lfparam = NULL,   dwparam = NULL,   netflowmode = \"\",   rspxparam = NULL,   FUN = identity,   ... )"},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect relations in a network — indirect_relations","text":"g igraph object. network relations derived. type String giving relation calculated. See Details options. lfparam Numeric parameter. used type = \"dist_lf\". dwparam Numeric parameter. used type = \"dist_walk\". netflowmode String, one raw, frac, norm. used type = \"depend_netflow\". rspxparam Numeric parameter. used type = \"depend_rsps\" type = \"depend_rspn\". FUN function allows transformation relations. See Details. ... Additional arguments passed FUN.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect relations in a network — indirect_relations","text":"matrix containing indirect relations network.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect relations in a network — indirect_relations","text":"type parameter following options. 'adjacency' returns adjacency matrix network. 'weights' returns weighted adjacency matrix network edge attribute 'weight' present. 'dist_sp' returns shortest path distances pairs nodes. 'depend_sp' returns dyadic dependencies $$\\delta(u,s) = \\sum_{t \\V} \\frac{\\sigma(s,t|u)}{\\sigma(s,t)}$$ \\(\\sigma(s,t|u)\\) number shortest paths s t include u \\(\\sigma(s,t)\\) total number shortest (s,t)-paths. relation used betweenness-like centrality indices. 'walks' returns walk counts pairs nodes, usually weighted decreasingly lengths properties can done adding function FUN.  See transform_relations options. 'dist_resist' returns resistance distance pairs nodes. 'dist_lf' returns logarithmic forest distance \\(d_\\alpha(s,t)\\). logarithmic forest distances form one-parametric family distances, converging shortest path distances \\(\\alpha -> 0\\) resistance distance \\(\\alpha -> \\infty\\). See (Chebotarev, 2011) details. parameter lfparam can used tune \\(\\alpha\\). 'dist_walk' returns walk distance \\(d_\\alpha^W(s,t)\\) nodes. walk distances form one-parametric family distances, converging shortest path distances \\(\\alpha -> 0\\) longest walk distances \\(\\alpha -> \\infty\\). Walk distances contain logarithmic forest distances special case. See (Chebotarev, 2012) details. 'dist_rwalk' returns expected length random walk two nodes. details see (Noh Rieger, 2004) 'depend_netflow' returns dependencies based network flow (See Freeman et al.,1991). netflowmode=\"raw\", function returns $$\\delta(u,s) = \\sum_{t \\V} f(s,t,G)-f(s,t,G-v)$$ f(s,t,G) maximum flow s t G f(s,t,G-v) G without node v. netflowmode=\"frac\" returns dependencies form, similar shortest path dependencies: $$\\delta(u,s) = \\sum_{t \\V} \\frac{f(s,t,G)-f(s,t,G-v)}{f(s,t,G)}$$ 'depend_curflow' returns pairwise dependencies based current flow. relation based idea 'depend_sp' 'depend_netflow'. However, instead considering shortest paths network flow, current flow (equivalent: random walks) nodes interest. See (Newman, 2005) details. 'depend_exp' returns pairwise dependencies based 'communicability': $$\\delta(u,s)=\\sum_{t \\V} \\frac{exp()_{st}-exp(+E(u))_{st}}{exp()_{st}},$$ E(u) nonzeros row column u, row column -1 +1. See (Estrada et al., 2009) additional details. 'depend_rsps'. Simple randomized shortest path dependencies. simple RSP dependency node u respect absorbing paths s t, defined expected number visits u s-t-walks. parameter rspxparam \"inverse temperature parameter\". converges infinity, shortest paths considered expected number visits node shortest path approaches probability following particular path. parameter converges zero, dependencies converge expected number visits node absorbing walks respect unbiased random walk probabilities. means undirected networks, relations converge adjacency. See (Kivimäki et al., 2016) details. 'depend_rspn' Net randomized shortest path dependencies. parameter rspxparam \"inverse temperature parameter\". asymptotic infinity case 'depend_rsps'. parameter approaches zero, converges 'depend_curflow'. net randomized shortest path dependencies closely related random walk interpretation current flows. See (Kivimäki et al., 2016) technical details. function FUN used transform indirect relation. See transform_relations predefined functions additional help.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indirect relations in a network — indirect_relations","text":"Chebotarev, P., 2012. walk distances graphs. Discrete Applied Mathematics, 160(10), pp.1484-1500. Chebotarev, P., 2011. class graph-geodetic distances generalizing shortest-path resistance distances. Discrete Applied Mathematics 159,295-302. Noh, J.D. Rieger, H., 2004. Random walks complex networks. Physical Review Letters, 92(11), p.118701. Freeman, L.C., Borgatti, S.P., White, D.R., 1991. Centrality Valued Graphs: Measure Betweenness Based Network Flow. Social Networks 13(2), 141-154. Newman, M.E., 2005. measure betweenness centrality based random walks. Social Networks, 27(1), pp.39-54. Estrada, E., Higham, D.J., Hatano, N., 2009. Communicability betweenness complex networks. Physica 388,764-774. Kivimäki, ., Lebichot, B., Saramäki, J., Saerens, M., 2016. Two betweenness centrality measures based Randomized Shortest Paths Scientific Reports 6: 19668","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect relations in a network — indirect_relations","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/indirect_relations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect relations in a network — indirect_relations","text":"","code":"library(igraph) data(\"dbces11\")  # shortest path distances D <- indirect_relations(dbces11, type = \"dist_sp\")  # inverted shortest path distances D <- indirect_relations(dbces11, type = \"dist_sp\", FUN = dist_inv)  # shortes path dependencies (used for betweenness) D <- indirect_relations(dbces11, type = \"depend_sp\")  # walks attenuated exponentially by their length W <- indirect_relations(dbces11, type = \"walks\", FUN = walks_exp)"},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":null,"dir":"Reference","previous_headings":"","what":"Check preservation — is_preserved","title":"Check preservation — is_preserved","text":"Checks partial ranking preserved ranking induced scores.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check preservation — is_preserved","text":"","code":"is_preserved(P, scores)"},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check preservation — is_preserved","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance. scores Numeric vector containing scores centrality index.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check preservation — is_preserved","text":"Logical scaler whether scores preserves relations P.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check preservation — is_preserved","text":"order score vector preserve partial ranking, following condition must fulfilled: P[u,v]==1 & scores[]<=scores[j].","code":""},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check preservation — is_preserved","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/is_preserved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check preservation — is_preserved","text":"","code":"library(igraph) # standard measures of centrality preserve the neighborhood inclusion preorder data(\"dbces11\") P <- neighborhood_inclusion(dbces11)  is_preserved(P, degree(dbces11)) #> [1] TRUE is_preserved(P, betweenness(dbces11)) #> [1] TRUE is_preserved(P, closeness(dbces11)) #> [1] TRUE"},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":null,"dir":"Reference","previous_headings":"","what":"Majorization gap — majorization_gap","title":"Majorization gap — majorization_gap","text":"Calculates (normalized) majorization gap undirected graph. majorization gap indicates far degree sequence graph degree sequence threshold_graph.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Majorization gap — majorization_gap","text":"","code":"majorization_gap(g, norm = TRUE)"},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Majorization gap — majorization_gap","text":"g igraph object norm True (Default) normalized majorization gap returned.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Majorization gap — majorization_gap","text":"Majorization gap undirected graph.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Majorization gap — majorization_gap","text":"distance measured number reverse unit transformations necessary turn degree sequence threshold sequence. First, corrected conjugated degree sequence d' calculated degree sequence d follows: $$d'_k= |\\{ : <k \\land d_i\\geq k-1 \\} | + | \\{ : >k \\land d_i\\geq k \\} |.$$ majorization gap defined $$1/2 \\sum_{k=1}^n \\max\\{d'_k - d_k,0\\}$$ higher value, away graph threshold graph.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Majorization gap — majorization_gap","text":"Schoch, D., Valente, T. W. Brandes, U., 2017. Correlations among centrality indices class uniquely ranked graphs. Social Networks 50, 46–54. Arikati, S.R. Peled, U.N., 1994. Degree sequences majorization. Linear Algebra Applications, 199, 179-211.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Majorization gap — majorization_gap","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/majorization_gap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Majorization gap — majorization_gap","text":"","code":"library(igraph) g <- graph.star(5, \"undirected\") majorization_gap(g) # 0 since star graphs are threshold graphs #> [1] 0  g <- sample_gnp(100, 0.15) majorization_gap(g, norm = TRUE) # fraction of reverse unit transformation #> [1] 0.7109589 majorization_gap(g, norm = FALSE) # number of reverse unit transformation #> [1] 519"},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"Performs probabilistic rank analysis based almost uniform sample possible rankings preserve partial ranking.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"","code":"mcmc_rank_prob(P, rp = nrow(P)^3)"},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"P P partial ranking matrix object calculated neighborhood_inclusion positional_dominance. rp Integer indicating number samples drawn.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"expected.rank Estimated expected ranks nodes relative.rank Matrix containing estimated relative rank probabilities: relative.rank[u,v] probability u ranked lower v.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"function can used instead exact_rank_prob number elements P large exact computation. rule thumb, number samples least cubic number elements P. See vignette(\"benchmarks\",package=\"netrankr\") guidelines benchmark results.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"Bubley, R. Dyer, M., 1999. Faster random generation linear extensions. Discrete Mathematics, 201(1):81-88","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/mcmc_rank_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate rank probabilities with Markov Chains — mcmc_rank_prob","text":"","code":"if (FALSE) { data(\"florentine_m\") P <- neighborhood_inclusion(florentine_m) res <- exact_rank_prob(P) mcmc <- mcmc_rank_prob(P, rp = vcount(g)^3)  # mean absolute error (expected ranks) mean(abs(res$expected.rank - mcmc$expected.rank)) }"},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighborhood-inclusion preorder — neighborhood_inclusion","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"Calculates neighborhood-inclusion preorder undirected graph.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"","code":"neighborhood_inclusion(g, sparse = FALSE)"},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"g igraph object sparse Logical scalar, whether create sparse matrix","code":""},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"neighborhood-inclusion preorder g matrix object. P[u,v]=1 \\(N(u)\\subseteq N[v]\\)","code":""},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"Neighborhood-inclusion defined $$N(u)\\subseteq N[v]$$ \\(N(u)\\) neighborhood \\(u\\) \\(N[v]=N(v)\\cup \\lbrace v\\rbrace\\) closed neighborhood \\(v\\). \\(N(u) \\subseteq N[v]\\) implies \\(c(u) \\leq c(v)\\), \\(c\\) centrality index based specific path algebra. Indices falling category closeness (variants), betweenness (variants) well many walk-based indices (eigenvector subgraph centrality, total communicability,...).","code":""},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"Schoch, D. Brandes, U., 2016. Re-conceptualizing centrality social networks. European Journal Applied Mathematics 27(6), 971-985. Brandes, U. Heine, M., Müller, J. Ortmann, M., 2017. Positional Dominance: Concepts Algorithms. Conference Algorithms Discrete Applied Mathematics, 60-71.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/neighborhood_inclusion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighborhood-inclusion preorder — neighborhood_inclusion","text":"","code":"library(igraph) # the neighborhood inclusion preorder of a star graph is complete g <- graph.star(5, \"undirected\") P <- neighborhood_inclusion(g) comparable_pairs(P) #> [1] 1  # the same holds for threshold graphs tg <- threshold_graph(50, 0.1) P <- neighborhood_inclusion(tg) comparable_pairs(P) #> [1] 1  # standard centrality indices preserve neighborhood-inclusion data(\"dbces11\") P <- neighborhood_inclusion(dbces11)  is_preserved(P, degree(dbces11)) #> [1] TRUE is_preserved(P, closeness(dbces11)) #> [1] TRUE is_preserved(P, betweenness(dbces11)) #> [1] TRUE"},{"path":"https://schochastics.github.io/netrankr/reference/netrankr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"netrankr: An R package for centrality and partial rankings in networks — netrankr-package","title":"netrankr: An R package for centrality and partial rankings in networks — netrankr-package","text":"netrankr provides several functions analyze partial rankings network centrality. main focus lies methods necessarily rely indices like degree, betweenness closeness. However, package also provides 20 indices, can constructed via Rstudio addin. package follows philosophy, centrality can decomposed series micro steps. Starting network, indirect_relations can derived can either aggregated index aggregate_positions, alternatively turned partial ranking positional_dominance. partial ranking can analyzed exact_rank_prob, obtain probabilistic centrality rankings.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/netrankr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"netrankr: An R package for centrality and partial rankings in networks — netrankr-package","text":"features package : Working neighborhood inclusion preorder. forms bases centrality analysis undirected unweighted graphs. details can found dedicated vignette: vignette(\"neighborhood_inclusion\",package = \"netrankr\") Constructing graphs unique centrality ranking. class graphs, known threshold graphs, can used benchmark centrality indices, since allow one ranking nodes. details consult vignette: vignette(\"threshold_graph\",package = \"netrankr\") Probabilistic centrality. apply handful indices choosing one fits best, possible analyze centrality rankings ? package includes several function calculate rank probabilities nodes network. include expected ranks relative rank probabilities (likely node central another?) Consult vignette(\"probabilistic_cent\",package = \"netrankr\") info. package provides several additional vignettes explain functionality netrankr conceptual ideas. See browseVignettes(package = 'netrankr')","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/netrankr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netrankr: An R package for centrality and partial rankings in networks — netrankr-package","text":"Maintainer: David Schoch david@schochastics.net (ORCID) contributors: Julian Müller julian.mueller@gess.ethz.ch [contributor]","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot netrankr_full object — plot.netrankr_full","title":"Plot netrankr_full object — plot.netrankr_full","text":"Plots result object obtained exact_rank_prob","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot netrankr_full object — plot.netrankr_full","text":"","code":"# S3 method for netrankr_full plot(x, icols = NULL, bcol = \"grey66\", ecol = \"black\", ...)"},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot netrankr_full object — plot.netrankr_full","text":"x netrankr_full object icols list colors (internal palette used missing) bcol color used barcharts ecol color used errorbars ... additional plot parameters","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_full.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot netrankr_full object — plot.netrankr_full","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"plot netrankr_interval objects — plot.netrankr_interval","title":"plot netrankr_interval objects — plot.netrankr_interval","text":"Plots results rank_intervals","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot netrankr_interval objects — plot.netrankr_interval","text":"","code":"# S3 method for netrankr_interval plot(x, cent_scores = NULL, cent_cols = NULL, ties.method = \"min\", ...)"},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot netrankr_interval objects — plot.netrankr_interval","text":"x netrank object cent_scores data frame containing centrality scores indices (optional) cent_cols colors centrality indices. NULL default palette used. Length must equal columns cent_scores. ties.method treat ties rankings. see rank details ... additional arguments plot","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_interval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plot netrankr_interval objects — plot.netrankr_interval","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot netrankr_mcmc object — plot.netrankr_mcmc","title":"Plot netrankr_mcmc object — plot.netrankr_mcmc","text":"Plots result object obtained mcmc_rank_prob","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot netrankr_mcmc object — plot.netrankr_mcmc","text":"","code":"# S3 method for netrankr_mcmc plot(x, icols = NULL, bcol = \"grey66\", ...)"},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot netrankr_mcmc object — plot.netrankr_mcmc","text":"x netrankr_mcmc object icols list colors (internal) bcol color used barcharts ... additional plot parameters","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot.netrankr_mcmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot netrankr_mcmc object — plot.netrankr_mcmc","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot_rank_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rank intervals — plot_rank_intervals","title":"Plot rank intervals — plot_rank_intervals","text":"function deprecated. Use plot(rank_intervals(P)) instead","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot_rank_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rank intervals — plot_rank_intervals","text":"","code":"plot_rank_intervals(P, cent.df = NULL, ties.method = \"min\")"},{"path":"https://schochastics.github.io/netrankr/reference/plot_rank_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rank intervals — plot_rank_intervals","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance. cent.df data frame containing centrality scores indices (optional). See Details. ties.method String specifying ties treated base rank function.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/plot_rank_intervals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot rank intervals — plot_rank_intervals","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/plot_rank_intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rank intervals — plot_rank_intervals","text":"","code":"library(igraph) data(\"dbces11\") P <- neighborhood_inclusion(dbces11) if (FALSE) { plot_rank_intervals(P) }  # adding index based rankings cent_scores <- data.frame(     degree = degree(dbces11),     betweenness = round(betweenness(dbces11), 4),     closeness = round(closeness(dbces11), 4),     eigenvector = round(eigen_centrality(dbces11)$vector, 4) ) if (FALSE) { plot_rank_intervals(P, cent.df = cent_scores) }"},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Dominance Relations — positional_dominance","title":"Generalized Dominance Relations — positional_dominance","text":"generalized dominance relations can computed one two mode networks.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Dominance Relations — positional_dominance","text":"","code":"positional_dominance(A, type = \"one-mode\", map = FALSE, benefit = TRUE)"},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Dominance Relations — positional_dominance","text":"Matrix containing attributes relations, instance calculated indirect_relations. type string either 'one-mode' (Default) regular one-mode network 'two-mode' general data matrix. map Logical scalar, whether rows can sorted (Default). See Details. benefit Logical scalar, whether attributes relations benefit cost variables.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Dominance Relations — positional_dominance","text":"Dominance relations matrix object. entry [u,v] 1 u dominated v.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Dominance Relations — positional_dominance","text":"Positional dominance generalization neighborhood-inclusion arbitrary network data. default case, checks pairs \\(u,v\\) \\(A_{ut} \\ge A_{vt}\\) holds \\(t\\) benefit = TRUE \\(A_{ut} \\le A_{vt}\\) holds \\(t\\) benefit = FALSE. form dominance referred dominance total heterogeneity. map=TRUE, rows \\(\\) sorted decreasingly (benefit = TRUE) increasingly (benefit = FALSE) dominance condition checked. second form dominance referred dominance total homogeneity, first called dominance total heterogeneity.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Dominance Relations — positional_dominance","text":"Brandes, U., 2016. Network positions. Methodological Innovations 9, 2059799116630650. Schoch, D. Brandes, U., 2016. Re-conceptualizing centrality social networks. European Journal Applied Mathematics 27(6), 971-985.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Dominance Relations — positional_dominance","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/positional_dominance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Dominance Relations — positional_dominance","text":"","code":"library(igraph)  data(\"dbces11\")  P <- neighborhood_inclusion(dbces11) comparable_pairs(P) #> [1] 0.1636364  # positional dominance under total heterogeneity dist <- indirect_relations(dbces11, type = \"dist_sp\") D <- positional_dominance(dist, map = FALSE, benefit = FALSE) comparable_pairs(D) #> [1] 0.1636364  # positional dominance under total homogeneity D_map <- positional_dominance(dist, map = TRUE, benefit = FALSE) comparable_pairs(D_map) #> [1] 0.8727273"},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Print netrankr_full object to terminal — print.netrankr_full","title":"Print netrankr_full object to terminal — print.netrankr_full","text":"Prints result object obtained exact_rank_prob terminal","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print netrankr_full object to terminal — print.netrankr_full","text":"","code":"# S3 method for netrankr_full print(x, ...)"},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print netrankr_full object to terminal — print.netrankr_full","text":"x netrankr_full object ... additional arguments print","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_full.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print netrankr_full object to terminal — print.netrankr_full","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Print netrankr_interval object to terminal — print.netrankr_interval","title":"Print netrankr_interval object to terminal — print.netrankr_interval","text":"Prints result object obtained rank_intervals terminal","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print netrankr_interval object to terminal — print.netrankr_interval","text":"","code":"# S3 method for netrankr_interval print(x, ...)"},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print netrankr_interval object to terminal — print.netrankr_interval","text":"x netrankr_interval object ... additional arguments print","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_interval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print netrankr_interval object to terminal — print.netrankr_interval","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print netrankr_mcmc object to terminal — print.netrankr_mcmc","title":"Print netrankr_mcmc object to terminal — print.netrankr_mcmc","text":"Prints result object obtained mcmc_rank_prob terminal","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print netrankr_mcmc object to terminal — print.netrankr_mcmc","text":"","code":"# S3 method for netrankr_mcmc print(x, ...)"},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print netrankr_mcmc object to terminal — print.netrankr_mcmc","text":"x netrank object ... additional arguments print","code":""},{"path":"https://schochastics.github.io/netrankr/reference/print.netrankr_mcmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print netrankr_mcmc object to terminal — print.netrankr_mcmc","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank interval of nodes — rank_intervals","title":"Rank interval of nodes — rank_intervals","text":"Calculate maximal minimal rank possible node ranking accordance partial ranking P.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank interval of nodes — rank_intervals","text":"","code":"rank_intervals(P)"},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank interval of nodes — rank_intervals","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank interval of nodes — rank_intervals","text":"object type netrankr_interval","code":""},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank interval of nodes — rank_intervals","text":"Note returned mid_point expected rank, instance computed exact_rank_prob. simply average min_rank max_rank. exact rank probabilities use exact_rank_prob.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rank interval of nodes — rank_intervals","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/rank_intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank interval of nodes — rank_intervals","text":"","code":"P <- matrix(c(0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, rep(0, 10)), 5, 5, byrow = TRUE) rank_intervals(P) #>  node:V1 rank interval: [1, 2] #>  node:V2 rank interval: [1, 4] #>  node:V3 rank interval: [2, 4] #>  node:V4 rank interval: [3, 5] #>  node:V5 rank interval: [3, 5]"},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral gap of a graph — spectral_gap","title":"Spectral gap of a graph — spectral_gap","text":"spectral (eigen) gap graph absolute difference biggest second biggest eigenvalue adjacency matrix. compare spectral gaps across networks, fraction can used.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral gap of a graph — spectral_gap","text":"","code":"spectral_gap(g, method = \"frac\")"},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral gap of a graph — spectral_gap","text":"g igraph object method string, either \"frac\" \"abs\"","code":""},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral gap of a graph — spectral_gap","text":"Numeric value","code":""},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spectral gap of a graph — spectral_gap","text":"spectral gap bounded 0 1 method=\"frac\". closer value one, bigger gap.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spectral gap of a graph — spectral_gap","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/spectral_gap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral gap of a graph — spectral_gap","text":"","code":"# The fractional spectral gap of a threshold graph is usually close to 1 g <- threshold_graph(50, 0.3) spectral_gap(g, method = \"frac\") #> [1] 0.7432692"},{"path":"https://schochastics.github.io/netrankr/reference/summary.netrankr_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a netrankr_full object — summary.netrankr_full","title":"Summary of a netrankr_full object — summary.netrankr_full","text":"Summarizes result object obtained exact_rank_prob terminal","code":""},{"path":"https://schochastics.github.io/netrankr/reference/summary.netrankr_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a netrankr_full object — summary.netrankr_full","text":"","code":"# S3 method for netrankr_full summary(object, ...)"},{"path":"https://schochastics.github.io/netrankr/reference/summary.netrankr_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a netrankr_full object — summary.netrankr_full","text":"object netrankr_full object ... additional arguments summary","code":""},{"path":"https://schochastics.github.io/netrankr/reference/summary.netrankr_full.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of a netrankr_full object — summary.netrankr_full","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Random threshold graphs — threshold_graph","title":"Random threshold graphs — threshold_graph","text":"Constructs random threshold graph. threshold graph graph neighborhood inclusion preorder complete.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random threshold graphs — threshold_graph","text":"","code":"threshold_graph(n, p, bseq)"},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random threshold graphs — threshold_graph","text":"n number vertices graph. p probability inserting dominating vertices. Equates approximately density graph. See Details. bseq (0,1)-vector binary sequence produces threshold grah. See details","code":""},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random threshold graphs — threshold_graph","text":"threshold graph igraph object","code":""},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random threshold graphs — threshold_graph","text":"Either n p, bseq must specified. Threshold graphs can constructed binary sequence. 0, isolated vertex inserted 1, vertex inserted connects previously inserted vertices. probability inserting dominating vertices controlled parameter p. bseq given instead, threshold graph constructed sequence. important property threshold graphs , centrality indices induce ranking.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random threshold graphs — threshold_graph","text":"Mahadev, N. Peled, U. N. , 1995. Threshold graphs related topics. Schoch, D., Valente, T. W. Brandes, U., 2017. Correlations among centrality indices class uniquely ranked graphs. Social Networks 50, 46–54.","code":""},{"path":[]},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random threshold graphs — threshold_graph","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/threshold_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random threshold graphs — threshold_graph","text":"","code":"library(igraph) g <- threshold_graph(10, 0.3) if (FALSE) { plot(g)  # star graphs and complete graphs are threshold graphs complete <- threshold_graph(10, 1) # complete graph plot(complete)  star <- threshold_graph(10, 0) # star graph plot(star) }  # centrality scores are perfectly rank correlated cor(degree(g), closeness(g), method = \"kendall\") #> [1] 1"},{"path":"https://schochastics.github.io/netrankr/reference/transform_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform indirect relations — transform_relations","title":"Transform indirect relations — transform_relations","text":"Mostly wrapper functions can used conjunction indirect_relations fine tune indirect relations.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transform_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform indirect relations — transform_relations","text":"","code":"dist_2pow(x)  dist_inv(x)  dist_dpow(x, alpha = 1)  dist_powd(x, alpha = 0.5)  walks_limit_prop(x)  walks_exp(x, alpha = 1)  walks_exp_even(x, alpha = 1)  walks_exp_odd(x, alpha = 1)  walks_attenuated(x, alpha = 1/max(x) * 0.99)  walks_uptok(x, alpha = 1, k = 3)"},{"path":"https://schochastics.github.io/netrankr/reference/transform_relations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform indirect relations — transform_relations","text":"x Matrix relations. alpha Potential weighting factor. k walk counts certain length.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transform_relations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform indirect relations — transform_relations","text":"Transformed relations matrix","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transform_relations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform indirect relations — transform_relations","text":"predefined functions follow naming scheme relation_transformation. Predefined functions walks_* thus best used type=\"walks\" indirect_relations. Theoretically, however, transformation can used relation. results might, however, interpretable. following functions implemented far: dist_2pow returns \\(2^{-x}\\) dist_inv returns \\(1/x\\) dist_dpow returns \\(x^{-\\alpha}\\) \\(\\alpha\\) chosen greater 0. dist_powd returns \\(\\alpha^x\\) \\(\\alpha\\) chosen 0 1. walks_limit_prop returns limit proportion walks pairs nodes. Calculating rowSums relation result principle eigenvector network. walks_exp returns \\(\\sum_{k=0}^\\infty \\frac{^k}{k!}\\) walks_exp_even returns \\(\\sum_{k=0}^\\infty \\frac{^{2k}}{(2k)!}\\) walks_exp_odd returns \\(\\sum_{k=0}^\\infty \\frac{^{2k+1}}{(2k+1)!}\\) walks_attenuated returns \\(\\sum_{k=0}^\\infty \\alpha^k ^k\\) walks_uptok returns \\(\\sum_{j=0}^k \\alpha^j ^j\\) Walk based transformation defined eigen decomposition adjacency matrix using fact $$f()=Xf(\\Lambda)X^T.$$ Care taken using user defined functions.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transform_relations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform indirect relations — transform_relations","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transitive_reduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Transitive Reduction — transitive_reduction","title":"Transitive Reduction — transitive_reduction","text":"Calculates transitive reduction partial ranking.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transitive_reduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transitive Reduction — transitive_reduction","text":"","code":"transitive_reduction(P)"},{"path":"https://schochastics.github.io/netrankr/reference/transitive_reduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transitive Reduction — transitive_reduction","text":"P partial ranking matrix object calculated neighborhood_inclusion positional_dominance.","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transitive_reduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transitive Reduction — transitive_reduction","text":"transitive reduction P","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transitive_reduction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transitive Reduction — transitive_reduction","text":"David Schoch","code":""},{"path":"https://schochastics.github.io/netrankr/reference/transitive_reduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transitive Reduction — transitive_reduction","text":"","code":"library(igraph)  g <- threshold_graph(100, 0.1) P <- neighborhood_inclusion(g) sum(P) #> [1] 5524  R <- transitive_reduction(P) sum(R) #> [1] 179"},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-122","dir":"Changelog","previous_headings":"","what":"netrankr 1.2.2","title":"netrankr 1.2.2","text":"fixed goodpractice warnings #17 added tests added documentation index_builder #15 possibly breaking: removed mid point calculation rank_intervals #12 upgraded igraph graph versions #23 printed matrices vignette indirect_relations #11","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-121","dir":"Changelog","previous_headings":"","what":"netrankr 1.2.1","title":"netrankr 1.2.1","text":"CRAN release: 2023-08-20 fixed PKGNAME-package per “Documenting packages” R-exts. fixed bibentry issue fixed #21","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-120","dir":"Changelog","previous_headings":"","what":"netrankr 1.2.0","title":"netrankr 1.2.0","text":"CRAN release: 2022-09-26 benchmark vignette now reproducible code data data-raw internal changes JOSS submission","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-111","dir":"Changelog","previous_headings":"","what":"netrankr 1.1.1","title":"netrankr 1.1.1","text":"CRAN release: 2021-12-21 removed hcl.colors due backward compatibility R <3.6 (#9)","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-110","dir":"Changelog","previous_headings":"","what":"netrankr 1.1.0","title":"netrankr 1.1.0","text":"CRAN release: 2021-09-03 neighborhood_inclusion() can return sparse matrix (Matrix package now imported) functions support sparse matrices inputs added summary method netrankr_full objects added .matrix method netrankr_full objects extract probability distributions changed .exit(par(op)) plot functions functions now errors instead warnings network vertex transitive better error handling input expected added legends default plot function netrankr_full objects added legend default plot function netrankr_mcmc objects changed default colors plot function netrankr_interval objects colorblind friendly","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-100","dir":"Changelog","previous_headings":"","what":"netrankr 1.0.0","title":"netrankr 1.0.0","text":"CRAN release: 2021-07-16 added S3 class netrankr_full (result exact_rank_prob()) print plot functions (#8) added S3 class netrankr_interval (result rank_intervals()) print plot functions (#8) added S3 class netrankr_mcmc (result mcmc_rank_prob()) print plot functions (#8) added dbces11 graph (smallest graph 5 different centers) plot_rank_intervals() now deprecated ggplot2 longer suggested","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-030","dir":"Changelog","previous_headings":"","what":"netrankr 0.3.0","title":"netrankr 0.3.0","text":"CRAN release: 2020-09-09 extended majorization_gap() unconnected graphs added incomparable_pairs()","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-021","dir":"Changelog","previous_headings":"","what":"netrankr 0.2.1","title":"netrankr 0.2.1","text":"CRAN release: 2018-09-18 fixed bug index_builder prevented building self defined indices fixed still existing bug transitive_reduction() added type = weights indirect_relations() type = \"identity\" indirect_relations() now deprecated. Use type = \"adjacency\" instead. type = \"weight\" added indirect_relations() return weighted adjacency matrix vertex names now properly added column rownames matrices produced indirect_relations() exact_rank_prob().","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-020","dir":"Changelog","previous_headings":"","what":"netrankr 0.2.0","title":"netrankr 0.2.0","text":"CRAN release: 2018-01-08 added Rstudio addin build 20 centrality indices added indirect relations: dist_lf,dist_walk, depend_netflow, depend_exp, depend_rsps, depend_rspn, depend_curflow, dist_rwalk, dist_walk API breaking: changed “dependencies” “depend_sp” indirect_relations() API breaking: changed “geodesic” “dist_sp” indirect_relations() API breaking: changed “resistance” “dist_resist” indirect_relations() old types still work version changed require library examples","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-011","dir":"Changelog","previous_headings":"","what":"netrankr 0.1.1","title":"netrankr 0.1.1","text":"fixed bug transitive_reduction() fixed errors documentation exact_rank_prob() rephrasing strong statements","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-010","dir":"Changelog","previous_headings":"","what":"netrankr 0.1.0","title":"netrankr 0.1.0","text":"first public release","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-005","dir":"Changelog","previous_headings":"","what":"netrankr 0.0.5","title":"netrankr 0.0.5","text":"function reimplemented C++ efficiency. vignettes added: browseVignettes(\"netrankr\") added visualization function plot_rank_intervals() spell checked extended help","code":""},{"path":"https://schochastics.github.io/netrankr/news/index.html","id":"netrankr-001-004","dir":"Changelog","previous_headings":"","what":"netrankr 0.0.1-0.0.4","title":"netrankr 0.0.1-0.0.4","text":"initial builds, predominantely written R.","code":""}]
